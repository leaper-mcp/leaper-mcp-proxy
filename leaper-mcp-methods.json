{
  "tools": [
    {
      "name": "ILRectRegion",
      "description": "这个是ILRectRegion类型(矩形ROI区域对象)的描述生成工具并返回生成后的ILRectRegion类型的描述JSON。\r\n其中ILRectRegion类型继承于ILRegion类型\r\n",
      "inputSchema": {
        "title": "ILRectRegion",
        "description": "这个是ILRectRegion类型(矩形ROI区域对象)的描述生成工具并返回生成后的ILRectRegion类型的描述JSON。\r\n其中ILRectRegion类型继承于ILRegion类型\r\n",
        "type": "object",
        "properties": {
          "TopLeftX": {
            "description": "矩形区域左上角顶点的 x 坐标，即左边界 (double类型)",
            "type": "number"
          },
          "TopLeftY": {
            "description": "矩形区域左上角顶点的 y 坐标，即上边界 (double类型)",
            "type": "number"
          },
          "Width": {
            "description": "矩形区域的宽度 (double类型)",
            "type": "number"
          },
          "Height": {
            "description": "矩形区域的高度  (double类型)",
            "type": "number"
          }
        },
        "required": [
          "TopLeftX",
          "TopLeftY",
          "Width",
          "Height"
        ]
      }
    },
    {
      "name": "ILImageOp_MultiplyScalar",
      "description": "这个是将输入图像和一个标量逐像素相乘的工具。输出一个新图像。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
      "inputSchema": {
        "title": "ILImageOp_MultiplyScalar",
        "description": "这个是将输入图像和一个标量逐像素相乘的工具。输出一个新图像。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
        "type": "object",
        "properties": {
          "imageUrl": {
            "description": "图片的url地址，通过这个地址获取到图片",
            "type": "string"
          },
          "scalar": {
            "description": "输入的标量，传入类型为double类型。",
            "type": "number"
          },
          "scalar2": {
            "description": "用于为彩色图像指定第二个通道使用的标量值，传入类型为double类型，若 scalar2 和 scalar3 都设置为 0（默认值），则对所有通道均使用 scalar 数值。",
            "type": "number"
          },
          "scalar3": {
            "description": "用于为彩色图像指定第三个通道使用的标量值，传入类型为double类型。",
            "type": "number"
          }
        },
        "required": [
          "imageUrl",
          "scalar",
          "scalar2",
          "scalar3"
        ]
      }
    },
    {
      "name": "ILBlobAnalysisColor",
      "description": "这个是彩色斑点分析工具。用户指定彩色值范围的选择这个工具。返回结构是一个序列化的json，其中Preview属性是输入图像在当前斑点分析配置下的二值化蒙版的图片地址，Build 为斑点分析结果，其中的Count表示斑点的数量，Item是所有斑点的集合，每一个斑点的: GetCenter 表示斑点的重心坐标;CountContour 表示斑点的外轮廓个数；CountHole 表示斑点的孔洞个数；GetRect 表示斑点的包围矩形； GetRotRect 表示斑点的包围旋转矩形； GetFeature是斑点的其他属性，包括：LPVBlobArea表示斑点面积、LPVBlobCenterX和LPVBlobCenterY表示斑点中心点的坐标;ToRegion 表示根据该斑点的轮廓蒙版，生成一个蒙版区域对象；LpvClassName 表示调用工具函数的名称；InputParameterFile 表示调用工具函数需要传入的参数文件名称",
      "inputSchema": {
        "title": "ILBlobAnalysisColor",
        "description": "这个是彩色斑点分析工具。用户指定彩色值范围的选择这个工具。返回结构是一个序列化的json，其中Preview属性是输入图像在当前斑点分析配置下的二值化蒙版的图片地址，Build 为斑点分析结果，其中的Count表示斑点的数量，Item是所有斑点的集合，每一个斑点的: GetCenter 表示斑点的重心坐标;CountContour 表示斑点的外轮廓个数；CountHole 表示斑点的孔洞个数；GetRect 表示斑点的包围矩形； GetRotRect 表示斑点的包围旋转矩形； GetFeature是斑点的其他属性，包括：LPVBlobArea表示斑点面积、LPVBlobCenterX和LPVBlobCenterY表示斑点中心点的坐标;ToRegion 表示根据该斑点的轮廓蒙版，生成一个蒙版区域对象；LpvClassName 表示调用工具函数的名称；InputParameterFile 表示调用工具函数需要传入的参数文件名称",
        "type": "object",
        "properties": {
          "imageUrl": {
            "description": "图片的url地址，通过这个地址获取到图片",
            "type": "string"
          },
          "paramsInfo": {
            "description": "工具的参数配置，传入一个序列化的json字符串，属性包括：AddBlobFilter（过滤器）、AddBlobRangeColor（斑点对象的彩色值范围)AddBlobFilter 有一个属性：SetFilterFeature，过滤条件在这里设置，值为一个对象。SetFilterFeature 对象的键为 LPVBlobArea、LPVBlobPerimeter、LPVBlobWidth、LPVBlobHeight、LPVBlobCircularity、LPVBlobConvexity、LPVBlobInertia、LPVBlobAspectRatio、LPVBlobSharpness、LPVBlobLuminance、LPVBlobContrast、LPVBlobCenterX、LPVBlobCenterY、LPVBlobColorV0、LPVBlobColorV1、LPVBlobColorV2 其中的任意一个，每个键具体含义为：LPVBlobArea 斑点的面积，LPVBlobPerimeter 斑点外轮廓的周长，LPVBlobWidth 斑点的旋转包围盒的长轴长度 ，LPVBlobHeight 斑点的旋转包围盒的短轴长度，LPVBlobCircularity 斑点的圆度形状特征，LPVBlobConvexity 斑点的凸度形状属性，LPVBlobInertia 斑点轮廓的惯性矩，LPVBlobAspectRatio 斑点的包围旋转矩形的长宽比，LPVBlobSharpness 斑点内像素的清晰度，LPVBlobLuminance 斑点内像素的平均亮度，LPVBlobContrast 斑点内像素的平均对比度，LPVBlobCenterX 斑点中心点的 x 坐标 ，LPVBlobCenterY  斑点中心点的 y 坐标 ，LPVBlobColorV0 斑点内像素的平均 0 通道值，LPVBlobColorV1 斑点内像素的平均 1 通道值，LPVBlobColorV2 斑点内像素的平均 2 通道值。值全部都是 LowerBound 和 UpperBound，其中 LowerBound 为下限，UpperBound为上限，例如：周长最小2000，最大为6000，转换为：LPVBlobPerimete:{LowerBound:2000,UpperBound:6000}。AddBlobRangeColor 有六个属性：分别对应红色、绿色、蓝色通道的最小值和最大值（RedMin, RedMax, GreenMin, GreenMax, BlueMin, BlueMax），值为0到255之间的整数举例：用户输入 “过滤面积最小为2000，最大为100000；周长最小2000，最大为6000；红色通道范围0到44，绿色2到44，蓝色0到44”，需要转换为：{\"AddBlobFilter\":{\"SetFilterFeature\":{\"LPVBlobArea\":{\"LowerBound\":2000,\"UpperBound\":100000},\"LPVBlobPerimeter\":{\"LowerBound\":2000,\"UpperBound\":6000}}},\"AddBlobRangeColor\":{\"RedMin\":0,\"RedMax\":44,\"GreenMin\":2,\"GreenMax\":44,\"BlueMin\":0,\"BlueMax\":44}}",
            "type": "string"
          },
          "RoiILRegion": {
            "description": "指定的Roi区域。如果用户没有指定区域，请直接传入 \"null\"。 如果用户指定区域，传入一个序列化的JSON字符串，属性包括：LpvClassName(调用工具函数的名称) 和 InputParameterFile(调用工具函数需要传入的参数文件名称)。这两个属性的值可以从前处理的MCP工具的返回值中获取。LpvClassName 表示要调用的Region接口名称，根据不同的区域类型有不同的接口名称，可选的名称有：ILAnnulusRegion (圆环区域对象)、ILAnnulusSectorRegion(环状扇形区域对象)、ILCircleRegion (圆形区域对象)、ILCompoundRegion (复合区域对象)、ILEllipseRegion (椭圆区域对象)、ILMaskRegion (蒙版区域对象)、ILPolyRegion (多边形区域对象)、ILRectRegion (矩形区域对象)、ILRotRectRegion (旋转矩形区域对象);InputParameterFile 表示调用工具函数需要传入的参数文件名称。",
            "type": "string"
          }
        },
        "required": [
          "imageUrl",
          "paramsInfo",
          "RoiILRegion"
        ]
      }
    },
    {
      "name": "ILImageOp_BitXor",
      "description": "这个是将两个图像逐像素进行位操作异或的工具。输出一个新图像。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
      "inputSchema": {
        "title": "ILImageOp_BitXor",
        "description": "这个是将两个图像逐像素进行位操作异或的工具。输出一个新图像。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
        "type": "object",
        "properties": {
          "imageUrl1": {
            "description": "图片的url地址，通过这个地址获取到图片1",
            "type": "string"
          },
          "imageUrl2": {
            "description": "图片的url地址，通过这个地址获取到图片2",
            "type": "string"
          }
        },
        "required": [
          "imageUrl1",
          "imageUrl2"
        ]
      }
    },
    {
      "name": "ILImageFilter_Gaussian",
      "description": "这个是高斯滤波工具。\r\n用户没有指定滤波相关参数时，不要调用设置参数的插件，传入的ILImageFilter 类的文件中已经设置了滤波相关的默认参数。\r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
      "inputSchema": {
        "title": "ILImageFilter_Gaussian",
        "description": "这个是高斯滤波工具。\r\n用户没有指定滤波相关参数时，不要调用设置参数的插件，传入的ILImageFilter 类的文件中已经设置了滤波相关的默认参数。\r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
        "type": "object",
        "properties": {
          "imageUrl": {
            "description": "图片的url地址，通过这个地址获取到图片",
            "type": "string"
          },
          "InputParameterFile": {
            "description": "指定的 ILImageFilter 类的文件地址，调用工具函数需要传入的参数文件名称。在调用此工具前要保证前处理中一定要有且仅有一次的 ILImageFilter 初始化工具调用。这个属性的值需要从前处理的MCP工具的返回值 InputParameterFile 字段中获取。",
            "type": "string"
          }
        },
        "required": [
          "imageUrl",
          "InputParameterFile"
        ]
      }
    },
    {
      "name": "ILImageThreshold_Stretch",
      "description": "这个是拉伸图像工具。拉伸输入图像并输出结果图像。如果用户同时设置了阈值，要先执行设置阈值工具，然后再执行此工具。返回结构是一个序列化的json，其中LpvClassName 表示调用工具函数的名称；InputParameterFile 表示调用工具函数需要传入的参数文件名称;result 属性是输入图像拉伸结果的图片地址",
      "inputSchema": {
        "title": "ILImageThreshold_Stretch",
        "description": "这个是拉伸图像工具。拉伸输入图像并输出结果图像。如果用户同时设置了阈值，要先执行设置阈值工具，然后再执行此工具。返回结构是一个序列化的json，其中LpvClassName 表示调用工具函数的名称；InputParameterFile 表示调用工具函数需要传入的参数文件名称;result 属性是输入图像拉伸结果的图片地址",
        "type": "object",
        "properties": {
          "imageUrl": {
            "description": "图片的url地址，通过这个地址获取到图片",
            "type": "string"
          },
          "InputParameterFile": {
            "description": "指定的 ILImageThreshold 类的文件地址，调用工具函数需要传入的参数文件名称。在调用此工具前要保证前处理中一定要有且仅有一次的 ILImageThreshold 初始化工具调用。这个属性的值需要从前处理的MCP工具的返回值 InputParameterFile 字段中获取。",
            "type": "string"
          }
        },
        "required": [
          "imageUrl",
          "InputParameterFile"
        ]
      }
    },
    {
      "name": "ILImageFilter_LocalMedian",
      "description": "这个是中值滤波工具。\r\n用户没有指定滤波相关参数时，不要调用设置参数的插件，传入的ILImageFilter 类的文件中已经设置了滤波相关的默认参数。\r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
      "inputSchema": {
        "title": "ILImageFilter_LocalMedian",
        "description": "这个是中值滤波工具。\r\n用户没有指定滤波相关参数时，不要调用设置参数的插件，传入的ILImageFilter 类的文件中已经设置了滤波相关的默认参数。\r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
        "type": "object",
        "properties": {
          "imageUrl": {
            "description": "图片的url地址，通过这个地址获取到图片",
            "type": "string"
          },
          "InputParameterFile": {
            "description": "指定的 ILImageFilter 类的文件地址，调用工具函数需要传入的参数文件名称。在调用此工具前要保证前处理中一定要有且仅有一次的 ILImageFilter 初始化工具调用。这个属性的值需要从前处理的MCP工具的返回值 InputParameterFile 字段中获取。",
            "type": "string"
          }
        },
        "required": [
          "imageUrl",
          "InputParameterFile"
        ]
      }
    },
    {
      "name": "DisplayMatch",
      "description": "这个是执行模板匹配的图像的交互工具，并返回标记斑点后的图片。\r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是标记输入图像斑点标记后的图片URL地址\r\n",
      "inputSchema": {
        "title": "DisplayMatch",
        "description": "这个是执行模板匹配的图像的交互工具，并返回标记斑点后的图片。\r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是标记输入图像斑点标记后的图片URL地址\r\n",
        "type": "object",
        "properties": {
          "imageUrl": {
            "description": "图片的url地址，通过这个地址获取到输入的图像",
            "type": "string"
          },
          "matchClassObjDescriptionJson": {
            "description": "模板匹配的功能对象壳用于训练模板匹配的功能。如果用户没有指定模板匹配的功能对象，请直接传入 \"null\" 。\r\n如果用户指定模板匹配的功能对象，传入一个序列化的JSON字符串，属性包括：LpvClassName(调用工具函数的名称) 和 InputParameterFile(调用工具函数需要传入的参数文件名称)。这两个属性的值可以从前处理的MCP工具的返回值中获取。LpvClassName 表示模板匹配的功能对象名称，当前名称应为：ILMatch (模板匹配的功能对象);\r\nInputParameterFile 表示调用工具函数需要传入的参数文件名称。\r\n",
            "type": "string"
          },
          "regionClassObjDescriptionJson": {
            "description": "用于限定模板匹配的Roi区域。如果用户没有指定区域，请提醒用户描述限定模板匹配的Roi区域。 限定模板匹配的Roi区域为一个序列化的JSON字符串，属性包括：LpvClassName(调用工具函数的名称) 和 InputParameterFile(调用工具函数需要传入的参数文件名称)。这两个属性的值可以从前处理的MCP工具的返回值中获取。LpvClassName 表示要调用的Region接口名称，根据不同的区域类型有不同的接口名称，可选的名称有：ILAnnulusRegion (圆环区域对象)、ILAnnulusSectorRegion(环状扇形区域对象)、ILCircleRegion (圆形区域对象)、ILCompoundRegion (复合区域对象)、ILEllipseRegion (椭圆区域对象)、ILMaskRegion (蒙版区域对象)、ILPolyRegion (多边形区域对象)、ILRectRegion (矩形区域对象)、ILRotRectRegion (旋转矩形区域对象);InputParameterFile 表示调用工具函数需要传入的参数文件名称。",
            "type": "string"
          }
        },
        "required": [
          "imageUrl",
          "matchClassObjDescriptionJson",
          "regionClassObjDescriptionJson"
        ]
      }
    },
    {
      "name": "ILImageOp_Divide",
      "description": "这个是将第一个输入图像逐像素除以第二个输入图像的像素的工具。输出一个新图像，对于第二个图像中的 0 像素，输出结果为 0。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
      "inputSchema": {
        "title": "ILImageOp_Divide",
        "description": "这个是将第一个输入图像逐像素除以第二个输入图像的像素的工具。输出一个新图像，对于第二个图像中的 0 像素，输出结果为 0。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
        "type": "object",
        "properties": {
          "imageUrl1": {
            "description": "图片的url地址，通过这个地址获取到图片1",
            "type": "string"
          },
          "imageUrl2": {
            "description": "图片的url地址，通过这个地址获取到图片2",
            "type": "string"
          }
        },
        "required": [
          "imageUrl1",
          "imageUrl2"
        ]
      }
    },
    {
      "name": "ILImageFilter_HighPass",
      "description": "这个是高通滤波工具，相对于梯度更一致的区域，增强图像中的边。 \r\n用户没有指定滤波相关参数时，不要调用设置参数的插件，传入的ILImageFilter 类的文件中已经设置了滤波相关的默认参数。\r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
      "inputSchema": {
        "title": "ILImageFilter_HighPass",
        "description": "这个是高通滤波工具，相对于梯度更一致的区域，增强图像中的边。 \r\n用户没有指定滤波相关参数时，不要调用设置参数的插件，传入的ILImageFilter 类的文件中已经设置了滤波相关的默认参数。\r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
        "type": "object",
        "properties": {
          "imageUrl": {
            "description": "图片的url地址，通过这个地址获取到图片",
            "type": "string"
          },
          "InputParameterFile": {
            "description": "指定的 ILImageFilter 类的文件地址，调用工具函数需要传入的参数文件名称。在调用此工具前要保证前处理中一定要有且仅有一次的 ILImageFilter 初始化工具调用。这个属性的值需要从前处理的MCP工具的返回值 InputParameterFile 字段中获取。",
            "type": "string"
          }
        },
        "required": [
          "imageUrl",
          "InputParameterFile"
        ]
      }
    },
    {
      "name": "ILImageOp_BitAnd",
      "description": "这个是将两个图像逐像素相加的工具。输出一个新图像，两个输入图像的尺寸需相同、类型相同。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
      "inputSchema": {
        "title": "ILImageOp_BitAnd",
        "description": "这个是将两个图像逐像素相加的工具。输出一个新图像，两个输入图像的尺寸需相同、类型相同。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
        "type": "object",
        "properties": {
          "imageUrl1": {
            "description": "图片的url地址，通过这个地址获取到图片1",
            "type": "string"
          },
          "imageUrl2": {
            "description": "图片的url地址，通过这个地址获取到图片2",
            "type": "string"
          }
        },
        "required": [
          "imageUrl1",
          "imageUrl2"
        ]
      }
    },
    {
      "name": "ILImageOp_DiffScalar",
      "description": "这个是计算输入图像和一个标量逐像素差值的工具。输出一个新图像。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
      "inputSchema": {
        "title": "ILImageOp_DiffScalar",
        "description": "这个是计算输入图像和一个标量逐像素差值的工具。输出一个新图像。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
        "type": "object",
        "properties": {
          "imageUrl": {
            "description": "图片的url地址，通过这个地址获取到图片",
            "type": "string"
          },
          "scalar": {
            "description": "输入的标量，传入类型为double类型。",
            "type": "number"
          },
          "scalar2": {
            "description": "用于为彩色图像指定第二个通道使用的标量值，传入类型为double类型，若 scalar2 和 scalar3 都设置为 0（默认值），则对所有通道均使用 scalar 数值。",
            "type": "number"
          },
          "scalar3": {
            "description": "用于为彩色图像指定第三个通道使用的标量值，传入类型为double类型。",
            "type": "number"
          }
        },
        "required": [
          "imageUrl",
          "scalar",
          "scalar2",
          "scalar3"
        ]
      }
    },
    {
      "name": "PatMatchIsLearnt",
      "description": "检查 当前模板匹配的功能对象 是否已训练。 \r\n布尔值(bool)类型  已训练，返回 true，否则返回 false ",
      "inputSchema": {
        "title": "PatMatchIsLearnt",
        "description": "检查 当前模板匹配的功能对象 是否已训练。 \r\n布尔值(bool)类型  已训练，返回 true，否则返回 false ",
        "type": "object",
        "properties": {
          "matchClassObjDescriptionJson": {
            "description": "模板匹配的功能对象用于训练模板匹配的功能。如果用户没有指定模板匹配的功能对象，请创建一个模板匹配的功能对象后传入。\r\n如果用户指定模板匹配的功能对象，传入一个序列化的JSON字符串，属性包括：LpvClassName(调用工具函数的名称) 和 InputParameterFile(调用工具函数需要传入的参数文件名称)。这两个属性的值可以从前处理的MCP工具的返回值中获取。LpvClassName 表示模板匹配的功能对象名称，当前名称应为：ILMatch (模板匹配的功能对象);\r\nInputParameterFile 表示调用工具函数需要传入的参数文件名称。\r\n",
            "type": "string"
          }
        },
        "required": [
          "matchClassObjDescriptionJson"
        ]
      }
    },
    {
      "name": "ILImageFilter_SetKernelSize",
      "description": "设置图像滤波工具所使用的滤波核的核尺寸 ,并返回设置完成的图像滤波工具的功能调用的对象。\r\n 返回结构是一个序列化的JSON字符串，属性包括：\r\nLpvClassName(调用工具函数的名称) 和 InputParameterFile(调用工具函数需要传入的参数文件名称)。这两个属性的值可以从前处理的MCP工具的返回值中获取。LpvClassName 表示图像滤波工具的功能调用的对象名称，目前名称应为：ILImageFilter (图像滤波工具的功能相关对象);\r\nInputParameterFile 表示图像滤波工具的功能调用的对象的参数文件名称。\r\n",
      "inputSchema": {
        "title": "ILImageFilter_SetKernelSize",
        "description": "设置图像滤波工具所使用的滤波核的核尺寸 ,并返回设置完成的图像滤波工具的功能调用的对象。\r\n 返回结构是一个序列化的JSON字符串，属性包括：\r\nLpvClassName(调用工具函数的名称) 和 InputParameterFile(调用工具函数需要传入的参数文件名称)。这两个属性的值可以从前处理的MCP工具的返回值中获取。LpvClassName 表示图像滤波工具的功能调用的对象名称，目前名称应为：ILImageFilter (图像滤波工具的功能相关对象);\r\nInputParameterFile 表示图像滤波工具的功能调用的对象的参数文件名称。\r\n",
        "type": "object",
        "properties": {
          "kWidth": {
            "description": "滤波核的宽度,传入类型为int类型,需要是一个 3 ~ 31 之间的奇数，如 3, 5, 7 等。\r\n",
            "type": "integer"
          },
          "kHeight": {
            "description": "滤波核的高度,传入类型为int类型，需要是一个 3 ~ 31 之间的奇数，如 3, 5, 7 等。若设置为 0，则使用与宽度相同。\r\n",
            "type": "integer"
          },
          "InputParameterFile": {
            "description": "指定的 ILImageFilter 类的文件地址，调用工具函数需要传入的参数文件名称。在调用此工具前要保证前处理中一定要有且仅有一次的 ILImageFilter 初始化工具调用。这个属性的值需要从前处理的MCP工具的返回值 InputParameterFile 字段中获取。",
            "type": "string"
          }
        },
        "required": [
          "kWidth",
          "kHeight",
          "InputParameterFile"
        ]
      }
    },
    {
      "name": "EdgeFilterGradientFull",
      "description": "提供了图像边缘增强的功能，在全梯度，水平和垂直边缘在输出图像中均表现为较亮的像素。\r\n 返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址",
      "inputSchema": {
        "title": "EdgeFilterGradientFull",
        "description": "提供了图像边缘增强的功能，在全梯度，水平和垂直边缘在输出图像中均表现为较亮的像素。\r\n 返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址",
        "type": "object",
        "properties": {
          "imageUrl": {
            "description": "图片的url地址，通过这个地址获取到输入图像",
            "type": "string"
          },
          "edgeFilterClassObjDescriptionJson": {
            "description": "用于图像边缘增强的功能调用的对象。如果用户没有指定图像边缘增强的功能相关对象，请创建一个图像边缘增强的功能调用的对象后传入。\r\n如果用户指定图像边缘增强的功能相关对象，传入一个序列化的JSON字符串，属性包括：LpvClassName(调用工具函数的名称) 和 InputParameterFile(调用工具函数需要传入的参数文件名称)。这两个属性的值可以从前处理的MCP工具的返回值中获取。LpvClassName 表示图像边缘增强的功能调用的对象名称，目前名称应为：ILEdgeFilter (图像边缘增强的功能相关对象);\r\nInputParameterFile 表示调用工具函数需要传入的参数文件名称。\r\n",
            "type": "string"
          }
        },
        "required": [
          "imageUrl",
          "edgeFilterClassObjDescriptionJson"
        ]
      }
    }
  ]
}