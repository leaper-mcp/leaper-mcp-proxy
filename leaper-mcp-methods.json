{
  "tools": [
    {
      "name": "ILImageOp_BitXorScalar",
      "description": "这个是将输入图像和一个标量逐像素进行位操作异或的工具。输出一个新图像。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
      "inputSchema": {
        "title": "ILImageOp_BitXorScalar",
        "description": "这个是将输入图像和一个标量逐像素进行位操作异或的工具。输出一个新图像。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
        "type": "object",
        "properties": {
          "imageUrl": {
            "description": "图片的url地址，通过这个地址获取到图片",
            "type": "string"
          },
          "scalar": {
            "description": "输入的标量，传入类型为double类型。",
            "type": "number"
          },
          "scalar2": {
            "description": "用于为彩色图像指定第二个通道使用的标量值，传入类型为double类型，若 scalar2 和 scalar3 都设置为 0（默认值），则对所有通道均使用 scalar 数值。",
            "type": "number"
          },
          "scalar3": {
            "description": "用于为彩色图像指定第三个通道使用的标量值，传入类型为double类型。",
            "type": "number"
          }
        },
        "required": [
          "imageUrl",
          "scalar",
          "scalar2",
          "scalar3"
        ]
      }
    },
    {
      "name": "ILImageFilter_EdgePreserveDenoise",
      "description": "这个是过滤图像噪声并保留边缘工具。\r\n用户没有指定滤波相关参数时，必须设置默认参数：平滑度0.01，加速算法运行的系数4。\r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
      "inputSchema": {
        "title": "ILImageFilter_EdgePreserveDenoise",
        "description": "这个是过滤图像噪声并保留边缘工具。\r\n用户没有指定滤波相关参数时，必须设置默认参数：平滑度0.01，加速算法运行的系数4。\r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
        "type": "object",
        "properties": {
          "imageUrl": {
            "description": "图片的url地址，通过这个地址获取到图片",
            "type": "string"
          },
          "speedupFactor": {
            "description": "加速算法运行的系数，传入类型为int类型，用于加速算法运行的系数，推荐使用核尺寸的因数",
            "type": "integer"
          },
          "InputParameterFile": {
            "description": "指定的 ILImageFilter 类的文件地址，调用工具函数需要传入的参数文件名称。在调用此工具前要保证前处理中一定要有且仅有一次的 ILImageFilter 初始化工具调用。这个属性的值需要从前处理的MCP工具的返回值 InputParameterFile 字段中获取。",
            "type": "string"
          },
          "refImageUrl": {
            "description": "边缘信息图片的url地址，通过这个地址获取到图片，如果用户没有指定图像，请直接传入 \"null\" 。用于为降噪过程提供需要保留边缘的大致位置和强度。该图像尺寸需与输入图像相同。",
            "type": "string"
          }
        },
        "required": [
          "imageUrl",
          "speedupFactor",
          "InputParameterFile",
          "refImageUrl"
        ]
      }
    },
    {
      "name": "EdgeFilterNew",
      "description": "提供了图像边缘增强的功能,创建一个图像边缘增强的功能调用的对象。\r\n 如果别的工具需要图像边缘增强的功能调用的对象，可以使用当前对象Json。\r\n返回结构是一个序列化的JSON字符串，属性包括：\r\nLpvClassName(调用工具函数的名称) 和 InputParameterFile(调用工具函数需要传入的参数文件名称)。\r\nLpvClassName 表示图像边缘增强的功能调用的对象名称，目前名称应为：ILEdgeFilter (图像边缘增强的功能调用的对象);\r\nInputParameterFile 表示图像边缘增强的功能调用的对象的参数文件名称。\r\n",
      "inputSchema": {
        "title": "EdgeFilterNew",
        "description": "提供了图像边缘增强的功能,创建一个图像边缘增强的功能调用的对象。\r\n 如果别的工具需要图像边缘增强的功能调用的对象，可以使用当前对象Json。\r\n返回结构是一个序列化的JSON字符串，属性包括：\r\nLpvClassName(调用工具函数的名称) 和 InputParameterFile(调用工具函数需要传入的参数文件名称)。\r\nLpvClassName 表示图像边缘增强的功能调用的对象名称，目前名称应为：ILEdgeFilter (图像边缘增强的功能调用的对象);\r\nInputParameterFile 表示图像边缘增强的功能调用的对象的参数文件名称。\r\n",
        "type": "object",
        "properties": {}
      }
    },
    {
      "name": "ILImageFilter_LocalMedian",
      "description": "这个是中值滤波工具。\r\n用户没有指定滤波相关参数时，不要调用设置参数的插件，传入的ILImageFilter 类的文件中已经设置了滤波相关的默认参数。\r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
      "inputSchema": {
        "title": "ILImageFilter_LocalMedian",
        "description": "这个是中值滤波工具。\r\n用户没有指定滤波相关参数时，不要调用设置参数的插件，传入的ILImageFilter 类的文件中已经设置了滤波相关的默认参数。\r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
        "type": "object",
        "properties": {
          "imageUrl": {
            "description": "图片的url地址，通过这个地址获取到图片",
            "type": "string"
          },
          "InputParameterFile": {
            "description": "指定的 ILImageFilter 类的文件地址，调用工具函数需要传入的参数文件名称。在调用此工具前要保证前处理中一定要有且仅有一次的 ILImageFilter 初始化工具调用。这个属性的值需要从前处理的MCP工具的返回值 InputParameterFile 字段中获取。",
            "type": "string"
          }
        },
        "required": [
          "imageUrl",
          "InputParameterFile"
        ]
      }
    },
    {
      "name": "ILImageOp_BitAndScalar",
      "description": "这个是将输入图像和一个标量逐像素进行位操作与的工具。输出一个新图像。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
      "inputSchema": {
        "title": "ILImageOp_BitAndScalar",
        "description": "这个是将输入图像和一个标量逐像素进行位操作与的工具。输出一个新图像。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
        "type": "object",
        "properties": {
          "imageUrl": {
            "description": "图片的url地址，通过这个地址获取到图片",
            "type": "string"
          },
          "scalar": {
            "description": "输入的标量，传入类型为double类型。",
            "type": "number"
          },
          "scalar2": {
            "description": "用于为彩色图像指定第二个通道使用的标量值，传入类型为double类型，若 scalar2 和 scalar3 都设置为 0（默认值），则对所有通道均使用 scalar 数值。",
            "type": "number"
          },
          "scalar3": {
            "description": "用于为彩色图像指定第三个通道使用的标量值，传入类型为double类型。",
            "type": "number"
          }
        },
        "required": [
          "imageUrl",
          "scalar",
          "scalar2",
          "scalar3"
        ]
      }
    },
    {
      "name": "NormalizeTo8",
      "description": "归一化输入图像到 8 位图\r\n 返回结构是一个序列化的JSON字符串，包含以下字段：\r\nResultImg: 输出结果图像URL地址",
      "inputSchema": {
        "title": "NormalizeTo8",
        "description": "归一化输入图像到 8 位图\r\n 返回结构是一个序列化的JSON字符串，包含以下字段：\r\nResultImg: 输出结果图像URL地址",
        "type": "object",
        "properties": {
          "imageUrl": {
            "description": "图片的url地址，通过这个地址获取到输入图像",
            "type": "string"
          },
          "minValue": {
            "description": "最小值，传入0表示使用图像最小值",
            "type": "number",
            "default": 0
          },
          "maxValue": {
            "description": "最大值，传入0表示使用图像最大值",
            "type": "number",
            "default": 0
          }
        },
        "required": [
          "imageUrl"
        ]
      }
    },
    {
      "name": "Convert",
      "description": "对彩色图像进行颜色空间转换（如 BGR 到 HSV）\r\n 返回结构是一个序列化的JSON字符串，包含以下字段：\r\nResultImg: 输出结果图像URL地址",
      "inputSchema": {
        "title": "Convert",
        "description": "对彩色图像进行颜色空间转换（如 BGR 到 HSV）\r\n 返回结构是一个序列化的JSON字符串，包含以下字段：\r\nResultImg: 输出结果图像URL地址",
        "type": "object",
        "properties": {
          "imageUrl": {
            "description": "图片的url地址，通过这个地址获取到输入图像",
            "type": "string"
          },
          "fromColorSpace": {
            "description": "输入图像的颜色空间，例如：LPVColorSpaceBGR（BGR颜色空间，通道顺序为B、G、R）、LPVColorSpaceHSV（HSV颜色空间，通道顺序为H、S、V）、LPVColorSpaceHLS（HLS颜色空间，通道顺序为H、L、S）、LPVColorSpaceYCrCb（YCrCb颜色空间，通道顺序为Y、Cr、Cb）、LPVColorSpaceYUV（YUV颜色空间，通道顺序为Y、U、V）、LPVColorSpaceXYZ（CIE 1931 XYZ颜色空间，通道顺序为X、Y、Z）、LPVColorSpaceLAB（CIE 1976 L*a*b*颜色空间，通道顺序为L、a*、b*）、LPVColorSpaceLUV（CIE 1976 L*u*v*颜色空间，通道顺序为L*、u*、v*）",
            "type": "string"
          },
          "toColorSpace": {
            "description": "目标颜色空间，例如：LPVColorSpaceBGR（BGR颜色空间，通道顺序为B、G、R）、LPVColorSpaceHSV（HSV颜色空间，通道顺序为H、S、V）、LPVColorSpaceHLS（HLS颜色空间，通道顺序为H、L、S）、LPVColorSpaceYCrCb（YCrCb颜色空间，通道顺序为Y、Cr、Cb）、LPVColorSpaceYUV（YUV颜色空间，通道顺序为Y、U、V）、LPVColorSpaceXYZ（CIE 1931 XYZ颜色空间，通道顺序为X、Y、Z）、LPVColorSpaceLAB（CIE 1976 L*a*b*颜色空间，通道顺序为L、a*、b*）、LPVColorSpaceLUV（CIE 1976 L*u*v*颜色空间，通道顺序为L*、u*、v*）",
            "type": "string"
          }
        },
        "required": [
          "imageUrl",
          "fromColorSpace",
          "toColorSpace"
        ]
      }
    },
    {
      "name": "ILImageFilter_EdgePreserveTextureEnhance",
      "description": "这个是增强图像纹理并保留边缘工具。\r\n用户没有指定滤波相关参数时，必须设置默认参数：平滑度0.01，加速算法运行的系数4。\r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
      "inputSchema": {
        "title": "ILImageFilter_EdgePreserveTextureEnhance",
        "description": "这个是增强图像纹理并保留边缘工具。\r\n用户没有指定滤波相关参数时，必须设置默认参数：平滑度0.01，加速算法运行的系数4。\r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
        "type": "object",
        "properties": {
          "imageUrl": {
            "description": "图片的url地址，通过这个地址获取到图片",
            "type": "string"
          },
          "speedupFactor": {
            "description": "加速算法运行的系数，传入类型为int类型，用于加速算法运行的系数，推荐使用核尺寸的因数",
            "type": "integer"
          },
          "InputParameterFile": {
            "description": "指定的 ILImageFilter 类的文件地址，调用工具函数需要传入的参数文件名称。在调用此工具前要保证前处理中一定要有且仅有一次的 ILImageFilter 初始化工具调用。这个属性的值需要从前处理的MCP工具的返回值 InputParameterFile 字段中获取。",
            "type": "string"
          },
          "refImageUrl": {
            "description": "边缘信息图片的url地址，通过这个地址获取到图片，如果用户没有指定图像，请直接传入 \"null\" 。用于为增强过程提供需要保留边缘的大致位置和强度。该图像尺寸需与输入图像相同。",
            "type": "string"
          }
        },
        "required": [
          "imageUrl",
          "speedupFactor",
          "InputParameterFile",
          "refImageUrl"
        ]
      }
    },
    {
      "name": "ILImageOp_Log",
      "description": "这个是对输入图像进行逐像素对数运算的工具。输出一个新图像。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
      "inputSchema": {
        "title": "ILImageOp_Log",
        "description": "这个是对输入图像进行逐像素对数运算的工具。输出一个新图像。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
        "type": "object",
        "properties": {
          "imageUrl": {
            "description": "图片的url地址，通过这个地址获取到图片",
            "type": "string"
          },
          "baseValue": {
            "description": "输入的底数，必须为一个正数，传入类型为double类型。",
            "type": "number"
          }
        },
        "required": [
          "imageUrl",
          "baseValue"
        ]
      }
    },
    {
      "name": "ILImageOp_MultiplyScalar",
      "description": "这个是将输入图像和一个标量逐像素相乘的工具。输出一个新图像。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
      "inputSchema": {
        "title": "ILImageOp_MultiplyScalar",
        "description": "这个是将输入图像和一个标量逐像素相乘的工具。输出一个新图像。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
        "type": "object",
        "properties": {
          "imageUrl": {
            "description": "图片的url地址，通过这个地址获取到图片",
            "type": "string"
          },
          "scalar": {
            "description": "输入的标量，传入类型为double类型。",
            "type": "number"
          },
          "scalar2": {
            "description": "用于为彩色图像指定第二个通道使用的标量值，传入类型为double类型，若 scalar2 和 scalar3 都设置为 0（默认值），则对所有通道均使用 scalar 数值。",
            "type": "number"
          },
          "scalar3": {
            "description": "用于为彩色图像指定第三个通道使用的标量值，传入类型为double类型。",
            "type": "number"
          }
        },
        "required": [
          "imageUrl",
          "scalar",
          "scalar2",
          "scalar3"
        ]
      }
    },
    {
      "name": "Depth8To16",
      "description": "转换 8 位图像到 16 位图像\r\n 返回结构是一个序列化的JSON字符串，包含以下字段：\r\nResultImg: 输出结果图像URL地址",
      "inputSchema": {
        "title": "Depth8To16",
        "description": "转换 8 位图像到 16 位图像\r\n 返回结构是一个序列化的JSON字符串，包含以下字段：\r\nResultImg: 输出结果图像URL地址",
        "type": "object",
        "properties": {
          "imageUrl": {
            "description": "图片的url地址，通过这个地址获取到输入图像",
            "type": "string"
          },
          "fromNthBit": {
            "description": "指定设置的开始索引，取值范围为 -7 ~ 15",
            "type": "integer",
            "default": 0
          }
        },
        "required": [
          "imageUrl"
        ]
      }
    },
    {
      "name": "ColorMap",
      "description": "对输入图像应用颜色映射表，生成伪彩图\r\n 返回结构是一个序列化的JSON字符串，包含以下字段：\r\nResultImg: 输出结果图像URL地址",
      "inputSchema": {
        "title": "ColorMap",
        "description": "对输入图像应用颜色映射表，生成伪彩图\r\n 返回结构是一个序列化的JSON字符串，包含以下字段：\r\nResultImg: 输出结果图像URL地址",
        "type": "object",
        "properties": {
          "imageUrl": {
            "description": "图片的url地址，通过这个地址获取到输入图像",
            "type": "string"
          },
          "colorMapType": {
            "description": "颜色映射表类型，例如：LPVColorMap.Jet",
            "type": "string"
          },
          "inverse": {
            "description": "是否反向映射",
            "type": "boolean",
            "default": false
          },
          "normalize": {
            "description": "是否归一化",
            "type": "boolean",
            "default": false
          },
          "minValue": {
            "description": "最小值",
            "type": "number",
            "default": 0
          },
          "maxValue": {
            "description": "最大值",
            "type": "number",
            "default": 0
          }
        },
        "required": [
          "imageUrl",
          "colorMapType"
        ]
      }
    },
    {
      "name": "ILImageThreshold_SetThresholdAdaptLocal",
      "description": "这个是 设置并使用局部自适应阈值 工具。返回结构是一个序列化的json，其中LpvClassName 表示调用工具函数的名称；InputParameterFile 表示调用工具函数需要传入的参数文件名称;",
      "inputSchema": {
        "title": "ILImageThreshold_SetThresholdAdaptLocal",
        "description": "这个是 设置并使用局部自适应阈值 工具。返回结构是一个序列化的json，其中LpvClassName 表示调用工具函数的名称；InputParameterFile 表示调用工具函数需要传入的参数文件名称;",
        "type": "object",
        "properties": {
          "blockWidth": {
            "description": "局部区域的宽度，需要是一个奇数",
            "type": "integer"
          },
          "blockHeight": {
            "description": "局部区域的高度，需要是一个奇数",
            "type": "integer"
          },
          "lbBias": {
            "description": "基于局部自适应阈值的下限修正值",
            "type": "integer"
          },
          "ubBias": {
            "description": "基于局部自适应阈值的上限修正值",
            "type": "integer"
          },
          "InputParameterFile": {
            "description": "指定的 ILImageThreshold 类的文件地址，调用工具函数需要传入的参数文件名称。在调用此工具前要保证前处理中一定要有且仅有一次的 ILImageThreshold 初始化工具调用。这个属性的值需要从前处理的MCP工具的返回值 InputParameterFile 字段中获取。",
            "type": "string"
          }
        },
        "required": [
          "blockWidth",
          "blockHeight",
          "lbBias",
          "ubBias",
          "InputParameterFile"
        ]
      }
    },
    {
      "name": "ILImageOp_BitOr",
      "description": "这个是将两个图像逐像素进行位操作或的工具。输出一个新图像。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
      "inputSchema": {
        "title": "ILImageOp_BitOr",
        "description": "这个是将两个图像逐像素进行位操作或的工具。输出一个新图像。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
        "type": "object",
        "properties": {
          "imageUrl1": {
            "description": "图片的url地址，通过这个地址获取到图片1",
            "type": "string"
          },
          "imageUrl2": {
            "description": "图片的url地址，通过这个地址获取到图片2",
            "type": "string"
          }
        },
        "required": [
          "imageUrl1",
          "imageUrl2"
        ]
      }
    },
    {
      "name": "ILImageOp_Multiply",
      "description": "这个是将两个图像逐像素相乘的工具。输出一个新图像，两个输入图像需尺寸相同、类型相同。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
      "inputSchema": {
        "title": "ILImageOp_Multiply",
        "description": "这个是将两个图像逐像素相乘的工具。输出一个新图像，两个输入图像需尺寸相同、类型相同。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
        "type": "object",
        "properties": {
          "imageUrl1": {
            "description": "图片的url地址，通过这个地址获取到图片1",
            "type": "string"
          },
          "imageUrl2": {
            "description": "图片的url地址，通过这个地址获取到图片2",
            "type": "string"
          }
        },
        "required": [
          "imageUrl1",
          "imageUrl2"
        ]
      }
    },
    {
      "name": "ILImageFilter_HighPass",
      "description": "这个是高通滤波工具，相对于梯度更一致的区域，增强图像中的边。 \r\n用户没有指定滤波相关参数时，不要调用设置参数的插件，传入的ILImageFilter 类的文件中已经设置了滤波相关的默认参数。\r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
      "inputSchema": {
        "title": "ILImageFilter_HighPass",
        "description": "这个是高通滤波工具，相对于梯度更一致的区域，增强图像中的边。 \r\n用户没有指定滤波相关参数时，不要调用设置参数的插件，传入的ILImageFilter 类的文件中已经设置了滤波相关的默认参数。\r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
        "type": "object",
        "properties": {
          "imageUrl": {
            "description": "图片的url地址，通过这个地址获取到图片",
            "type": "string"
          },
          "InputParameterFile": {
            "description": "指定的 ILImageFilter 类的文件地址，调用工具函数需要传入的参数文件名称。在调用此工具前要保证前处理中一定要有且仅有一次的 ILImageFilter 初始化工具调用。这个属性的值需要从前处理的MCP工具的返回值 InputParameterFile 字段中获取。",
            "type": "string"
          }
        },
        "required": [
          "imageUrl",
          "InputParameterFile"
        ]
      }
    },
    {
      "name": "ILImageOp_Blend",
      "description": "这个是将多帧图像融合用于将多张同一场景的图像融合为一张的工具。在不同的场景，通过使用不同的聚合方式达到不同目的。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
      "inputSchema": {
        "title": "ILImageOp_Blend",
        "description": "这个是将多帧图像融合用于将多张同一场景的图像融合为一张的工具。在不同的场景，通过使用不同的聚合方式达到不同目的。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
        "type": "object",
        "properties": {
          "imageUrlList": {
            "description": "图片的url地址队列，通过这个地址获取到图片",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "aggType": {
            "description": "融合方式，传入类型为LPVAggregation类型。有效的类型为：0：LPVAggAvg（均值：降低图像噪声，在光照条件不佳、亮度不断变化的场景下，获得更稳定的图像质量。）、1：LPVAggDev（标准差：结果图像中的较亮像素表示在多帧图像中该位置的像素值变化较大。）3：LPVAggMin（最小值：减少亮部区域，例如，用于减少过曝区域。）、4：LPVAggMax（最大值：减少暗部区域，减少阴影。）",
            "type": "integer"
          }
        },
        "required": [
          "imageUrlList",
          "aggType"
        ]
      }
    },
    {
      "name": "EdgeFilterGradientV",
      "description": "提供了图像边缘增强的功能，在垂直梯度，垂直边缘在输出图像中表现为较亮的像素。 \r\n 返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址",
      "inputSchema": {
        "title": "EdgeFilterGradientV",
        "description": "提供了图像边缘增强的功能，在垂直梯度，垂直边缘在输出图像中表现为较亮的像素。 \r\n 返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址",
        "type": "object",
        "properties": {
          "imageUrl": {
            "description": "图片的url地址，通过这个地址获取到输入图像",
            "type": "string"
          },
          "edgeFilterClassObjDescriptionJson": {
            "description": "用于图像边缘增强的功能调用的对象。如果用户没有指定图像边缘增强的功能相关对象，请创建一个图像边缘增强的功能调用的对象后传入。\r\n如果用户指定图像边缘增强的功能相关对象，传入一个序列化的JSON字符串，属性包括：LpvClassName(调用工具函数的名称) 和 InputParameterFile(调用工具函数需要传入的参数文件名称)。这两个属性的值可以从前处理的MCP工具的返回值中获取。LpvClassName 表示图像边缘增强的功能调用的对象名称，目前名称应为：ILEdgeFilter (图像边缘增强的功能相关对象);\r\nInputParameterFile 表示调用工具函数需要传入的参数文件名称。\r\n",
            "type": "string"
          }
        },
        "required": [
          "imageUrl",
          "edgeFilterClassObjDescriptionJson"
        ]
      }
    },
    {
      "name": "ILImageOp_MinScalar",
      "description": "这个是将输入图像和一个标量逐像素比较，取其最小值的工具。输出一个新图像。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
      "inputSchema": {
        "title": "ILImageOp_MinScalar",
        "description": "这个是将输入图像和一个标量逐像素比较，取其最小值的工具。输出一个新图像。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
        "type": "object",
        "properties": {
          "imageUrl": {
            "description": "图片的url地址，通过这个地址获取到图片",
            "type": "string"
          },
          "scalar": {
            "description": "输入的标量，传入类型为double类型。",
            "type": "number"
          },
          "scalar2": {
            "description": "用于为彩色图像指定第二个通道使用的标量值，传入类型为double类型，若 scalar2 和 scalar3 都设置为 0（默认值），则对所有通道均使用 scalar 数值。",
            "type": "number"
          },
          "scalar3": {
            "description": "用于为彩色图像指定第三个通道使用的标量值，传入类型为double类型。",
            "type": "number"
          }
        },
        "required": [
          "imageUrl",
          "scalar",
          "scalar2",
          "scalar3"
        ]
      }
    },
    {
      "name": "ILImageThreshold_Stretch",
      "description": "这个是拉伸图像工具。拉伸输入图像并输出结果图像。如果用户同时设置了阈值，要先执行设置阈值工具，然后再执行此工具。返回结构是一个序列化的json，其中LpvClassName 表示调用工具函数的名称；InputParameterFile 表示调用工具函数需要传入的参数文件名称;result 属性是输入图像拉伸结果的图片地址",
      "inputSchema": {
        "title": "ILImageThreshold_Stretch",
        "description": "这个是拉伸图像工具。拉伸输入图像并输出结果图像。如果用户同时设置了阈值，要先执行设置阈值工具，然后再执行此工具。返回结构是一个序列化的json，其中LpvClassName 表示调用工具函数的名称；InputParameterFile 表示调用工具函数需要传入的参数文件名称;result 属性是输入图像拉伸结果的图片地址",
        "type": "object",
        "properties": {
          "imageUrl": {
            "description": "图片的url地址，通过这个地址获取到图片",
            "type": "string"
          },
          "InputParameterFile": {
            "description": "指定的 ILImageThreshold 类的文件地址，调用工具函数需要传入的参数文件名称。在调用此工具前要保证前处理中一定要有且仅有一次的 ILImageThreshold 初始化工具调用。这个属性的值需要从前处理的MCP工具的返回值 InputParameterFile 字段中获取。",
            "type": "string"
          }
        },
        "required": [
          "imageUrl",
          "InputParameterFile"
        ]
      }
    },
    {
      "name": "ILImageOp_TileY",
      "description": "这个是将垂直平铺一组图像，合成一张大尺寸图像的工具。输出一个新图像。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
      "inputSchema": {
        "title": "ILImageOp_TileY",
        "description": "这个是将垂直平铺一组图像，合成一张大尺寸图像的工具。输出一个新图像。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
        "type": "object",
        "properties": {
          "imageUrlList": {
            "description": "图片的url地址队列，通过这个地址获取到图片",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "columnCount": {
            "description": "每列的图像个数，传入类型为int类型。若队列中的图像总数不被整除，则最后一列的剩余像素将被填充为背景色。传入 0 或负数，用于生成单列的合成图像。",
            "type": "integer"
          },
          "compactMode": {
            "description": "紧凑模式开关，传入类型为bool类型。在紧凑模式下（True），一行中的图像被紧密地连续排布。否则（False），结果图像的尺寸由输入图像中的最大长宽决定，其中较小的图像将被放置在对应行列的中心。",
            "type": "boolean"
          }
        },
        "required": [
          "imageUrlList",
          "columnCount",
          "compactMode"
        ]
      }
    },
    {
      "name": "ILImageOp_BitXor",
      "description": "这个是将两个图像逐像素进行位操作异或的工具。输出一个新图像。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
      "inputSchema": {
        "title": "ILImageOp_BitXor",
        "description": "这个是将两个图像逐像素进行位操作异或的工具。输出一个新图像。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
        "type": "object",
        "properties": {
          "imageUrl1": {
            "description": "图片的url地址，通过这个地址获取到图片1",
            "type": "string"
          },
          "imageUrl2": {
            "description": "图片的url地址，通过这个地址获取到图片2",
            "type": "string"
          }
        },
        "required": [
          "imageUrl1",
          "imageUrl2"
        ]
      }
    },
    {
      "name": "ILImageThreshold_SetThreshold",
      "description": "这个是 设置前景像素的固定阈值范围 工具。返回结构是一个序列化的json，其中LpvClassName 表示调用工具函数的名称；InputParameterFile 表示调用工具函数需要传入的参数文件名称;",
      "inputSchema": {
        "title": "ILImageThreshold_SetThreshold",
        "description": "这个是 设置前景像素的固定阈值范围 工具。返回结构是一个序列化的json，其中LpvClassName 表示调用工具函数的名称；InputParameterFile 表示调用工具函数需要传入的参数文件名称;",
        "type": "object",
        "properties": {
          "lb": {
            "description": "阈值范围下限",
            "type": "integer"
          },
          "ub": {
            "description": "阈值范围上限",
            "type": "integer"
          },
          "InputParameterFile": {
            "description": "指定的 ILImageThreshold 类的文件地址，调用工具函数需要传入的参数文件名称。在调用此工具前要保证前处理中一定要有且仅有一次的 ILImageThreshold 初始化工具调用。这个属性的值需要从前处理的MCP工具的返回值 InputParameterFile 字段中获取。",
            "type": "string"
          }
        },
        "required": [
          "lb",
          "ub",
          "InputParameterFile"
        ]
      }
    },
    {
      "name": "ILImageOp_ScaleRotate",
      "description": "这个是缩放和旋转输入图像的工具。使用用户指定的锚点。若指定的结果图像对象为空图像，则生成和输入图像尺寸相同的图像。否则，将保持结果图像的尺寸，超出图像范围的像素设为背景像素（默认为黑色）。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
      "inputSchema": {
        "title": "ILImageOp_ScaleRotate",
        "description": "这个是缩放和旋转输入图像的工具。使用用户指定的锚点。若指定的结果图像对象为空图像，则生成和输入图像尺寸相同的图像。否则，将保持结果图像的尺寸，超出图像范围的像素设为背景像素（默认为黑色）。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
        "type": "object",
        "properties": {
          "imageUrl": {
            "description": "图片的url地址，通过这个地址获取到图片",
            "type": "string"
          },
          "angle": {
            "description": "顺时针旋转角度，传入类型为double类型。",
            "type": "number"
          },
          "zoomX": {
            "description": "x 方向的缩放比例，传入类型为double类型。",
            "type": "number"
          },
          "zoomY": {
            "description": "y 方向的缩放比例，传入类型为double类型。",
            "type": "number"
          },
          "pivotImgX": {
            "description": "输入图像上的锚点的 x 坐标。该锚点将作为缩放和旋转的中心，传入类型为double类型。",
            "type": "number"
          },
          "pivotImgY": {
            "description": "输入图像上的锚点的 y 坐标，传入类型为double类型。",
            "type": "number"
          },
          "pivotResultX": {
            "description": "结果图像上的锚点的 x 坐标。该锚点位置上的像素与输入图像锚点位置上的像素为“同一个”，传入类型为double类型。",
            "type": "number"
          },
          "pivotResultY": {
            "description": "结果图像上的锚点的 y 坐标，传入类型为double类型。",
            "type": "number"
          },
          "interMethod": {
            "description": "插值方法，传入类型为LPVInterpolationMethod类型。",
            "type": "integer"
          }
        },
        "required": [
          "imageUrl",
          "angle",
          "zoomX",
          "zoomY",
          "pivotImgX",
          "pivotImgY",
          "pivotResultX",
          "pivotResultY",
          "interMethod"
        ]
      }
    },
    {
      "name": "ILImageOp_Diff",
      "description": "这个是将两个图像逐像素差值的工具。输出一个新图像。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
      "inputSchema": {
        "title": "ILImageOp_Diff",
        "description": "这个是将两个图像逐像素差值的工具。输出一个新图像。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
        "type": "object",
        "properties": {
          "imageUrl1": {
            "description": "图片的url地址，通过这个地址获取到图片1",
            "type": "string"
          },
          "imageUrl2": {
            "description": "图片的url地址，通过这个地址获取到图片2",
            "type": "string"
          }
        },
        "required": [
          "imageUrl1",
          "imageUrl2"
        ]
      }
    },
    {
      "name": "ILImageOp_NormalizeMeanStdDev",
      "description": "这个是归一化输入图像，以当前图像的均值和标准差计算感兴趣的数值范围，拉伸到目标数值范围的工具。不改变图像位深，归一化后的结果图像与输入位深相同、通道数相同。对于彩色的多通道图像，输出也是彩色多通道图像，每个通道分别独立进行归一化。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。\r\nbelowMask属性是入图图像中超出感兴趣数值范围的像素的蒙版地址。白色像素表示这些位置的数值小于 fromMinValue 或者大于 fromMaxValue 。可基于该蒙版，将这些位置的数值设置为统一个黑色或目标的最小最大值，或调用 FillHole() 进行修补。\r\naboveMask属性是入图图像中超出感兴趣数值范围的像素的蒙版地址。白色像素表示这些位置的数值小于 fromMinValue 或者大于 fromMaxValue 。可基于该蒙版，将这些位置的数值设置为统一个黑色或目标的最小最大值，或调用 FillHole() 进行修补。 ",
      "inputSchema": {
        "title": "ILImageOp_NormalizeMeanStdDev",
        "description": "这个是归一化输入图像，以当前图像的均值和标准差计算感兴趣的数值范围，拉伸到目标数值范围的工具。不改变图像位深，归一化后的结果图像与输入位深相同、通道数相同。对于彩色的多通道图像，输出也是彩色多通道图像，每个通道分别独立进行归一化。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。\r\nbelowMask属性是入图图像中超出感兴趣数值范围的像素的蒙版地址。白色像素表示这些位置的数值小于 fromMinValue 或者大于 fromMaxValue 。可基于该蒙版，将这些位置的数值设置为统一个黑色或目标的最小最大值，或调用 FillHole() 进行修补。\r\naboveMask属性是入图图像中超出感兴趣数值范围的像素的蒙版地址。白色像素表示这些位置的数值小于 fromMinValue 或者大于 fromMaxValue 。可基于该蒙版，将这些位置的数值设置为统一个黑色或目标的最小最大值，或调用 FillHole() 进行修补。 ",
        "type": "object",
        "properties": {
          "imageUrl": {
            "description": "图片的url地址，通过这个地址获取到图片",
            "type": "string"
          },
          "k1": {
            "description": "计算数值下限时使用的标准差系数，传入类型为double类型。",
            "type": "number"
          },
          "k2": {
            "description": "计算数值上限时使用的标准差系数，负数表示使用与 k1 相同的系数，传入类型为double类型。",
            "type": "number"
          },
          "toMinValue": {
            "description": "指定目标的数值范围，传入类型为double类型。表示使用图像位深的理论数值范围的最小值，对于 8 位图使用 0 ~ 255，对于 16 位图使用 0 ~ 65535 ",
            "type": "number"
          },
          "toMaxValue": {
            "description": "指定目标的数值范围，传入类型为double类型。表示使用图像位深的理论数值范围的最大值，对于 8 位图使用 0 ~ 255，对于 16 位图使用 0 ~ 65535 ",
            "type": "number"
          }
        },
        "required": [
          "imageUrl",
          "k1",
          "k2",
          "toMinValue",
          "toMaxValue"
        ]
      }
    },
    {
      "name": "ILImageOp_Pow",
      "description": "这个是将对输入图像进行逐像素幂运算的工具。输出一个新图像。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
      "inputSchema": {
        "title": "ILImageOp_Pow",
        "description": "这个是将对输入图像进行逐像素幂运算的工具。输出一个新图像。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
        "type": "object",
        "properties": {
          "imageUrl": {
            "description": "图片的url地址，通过这个地址获取到图片",
            "type": "string"
          },
          "power": {
            "description": "输入的指数，传入类型为double类型。",
            "type": "number"
          }
        },
        "required": [
          "imageUrl",
          "power"
        ]
      }
    },
    {
      "name": "ILImageOp_BitNot",
      "description": "这个是将输入图像逐像素进行位操作取非的工具。输出一个新图像。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
      "inputSchema": {
        "title": "ILImageOp_BitNot",
        "description": "这个是将输入图像逐像素进行位操作取非的工具。输出一个新图像。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
        "type": "object",
        "properties": {
          "imageUrl": {
            "description": "图片的url地址，通过这个地址获取到图片",
            "type": "string"
          }
        },
        "required": [
          "imageUrl"
        ]
      }
    },
    {
      "name": "ILImageOp_BitAnd",
      "description": "这个是将两个图像逐像素相加的工具。输出一个新图像，两个输入图像的尺寸需相同、类型相同。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
      "inputSchema": {
        "title": "ILImageOp_BitAnd",
        "description": "这个是将两个图像逐像素相加的工具。输出一个新图像，两个输入图像的尺寸需相同、类型相同。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
        "type": "object",
        "properties": {
          "imageUrl1": {
            "description": "图片的url地址，通过这个地址获取到图片1",
            "type": "string"
          },
          "imageUrl2": {
            "description": "图片的url地址，通过这个地址获取到图片2",
            "type": "string"
          }
        },
        "required": [
          "imageUrl1",
          "imageUrl2"
        ]
      }
    },
    {
      "name": "ILImageOp_SubScalar",
      "description": "这个是将输入图像和一个标量逐像素相减的工具。输出一个新图像。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
      "inputSchema": {
        "title": "ILImageOp_SubScalar",
        "description": "这个是将输入图像和一个标量逐像素相减的工具。输出一个新图像。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
        "type": "object",
        "properties": {
          "imageUrl": {
            "description": "图片的url地址，通过这个地址获取到图片",
            "type": "string"
          },
          "scalar": {
            "description": "输入的标量，传入类型为double类型。",
            "type": "number"
          },
          "scalar2": {
            "description": "用于为彩色图像指定第二个通道使用的标量值，传入类型为double类型，若 scalar2 和 scalar3 都设置为 0（默认值），则对所有通道均使用 scalar 数值。",
            "type": "number"
          },
          "scalar3": {
            "description": "用于为彩色图像指定第三个通道使用的标量值，传入类型为double类型。",
            "type": "number"
          }
        },
        "required": [
          "imageUrl",
          "scalar",
          "scalar2",
          "scalar3"
        ]
      }
    },
    {
      "name": "ILImageOp_DiffScalar",
      "description": "这个是计算输入图像和一个标量逐像素差值的工具。输出一个新图像。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
      "inputSchema": {
        "title": "ILImageOp_DiffScalar",
        "description": "这个是计算输入图像和一个标量逐像素差值的工具。输出一个新图像。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
        "type": "object",
        "properties": {
          "imageUrl": {
            "description": "图片的url地址，通过这个地址获取到图片",
            "type": "string"
          },
          "scalar": {
            "description": "输入的标量，传入类型为double类型。",
            "type": "number"
          },
          "scalar2": {
            "description": "用于为彩色图像指定第二个通道使用的标量值，传入类型为double类型，若 scalar2 和 scalar3 都设置为 0（默认值），则对所有通道均使用 scalar 数值。",
            "type": "number"
          },
          "scalar3": {
            "description": "用于为彩色图像指定第三个通道使用的标量值，传入类型为double类型。",
            "type": "number"
          }
        },
        "required": [
          "imageUrl",
          "scalar",
          "scalar2",
          "scalar3"
        ]
      }
    },
    {
      "name": "ILImageOp_Normalize",
      "description": "这个是归一化输入图像，拉伸指定的最小最大值范围内的像素到目标数值范围的工具。不改变图像位深，归一化后的结果图像与输入位深相同、通道数相同。对于彩色的多通道图像，输出也是彩色多通道图像，每个通道分别独立进行归一化。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。\r\nbelowMask属性是入图图像中超出感兴趣数值范围的像素的蒙版地址。白色像素表示这些位置的数值小于 fromMinValue 或者大于 fromMaxValue 。可基于该蒙版，将这些位置的数值设置为统一个黑色或目标的最小最大值，或调用 FillHole() 进行修补。\r\naboveMask属性是入图图像中超出感兴趣数值范围的像素的蒙版地址。白色像素表示这些位置的数值小于 fromMinValue 或者大于 fromMaxValue 。可基于该蒙版，将这些位置的数值设置为统一个黑色或目标的最小最大值，或调用 FillHole() 进行修补。 ",
      "inputSchema": {
        "title": "ILImageOp_Normalize",
        "description": "这个是归一化输入图像，拉伸指定的最小最大值范围内的像素到目标数值范围的工具。不改变图像位深，归一化后的结果图像与输入位深相同、通道数相同。对于彩色的多通道图像，输出也是彩色多通道图像，每个通道分别独立进行归一化。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。\r\nbelowMask属性是入图图像中超出感兴趣数值范围的像素的蒙版地址。白色像素表示这些位置的数值小于 fromMinValue 或者大于 fromMaxValue 。可基于该蒙版，将这些位置的数值设置为统一个黑色或目标的最小最大值，或调用 FillHole() 进行修补。\r\naboveMask属性是入图图像中超出感兴趣数值范围的像素的蒙版地址。白色像素表示这些位置的数值小于 fromMinValue 或者大于 fromMaxValue 。可基于该蒙版，将这些位置的数值设置为统一个黑色或目标的最小最大值，或调用 FillHole() 进行修补。 ",
        "type": "object",
        "properties": {
          "imageUrl": {
            "description": "图片的url地址，通过这个地址获取到图片",
            "type": "string"
          },
          "fromMinValue": {
            "description": "指定感兴趣的数值范围，传入类型为double类型。表示使用当前图像的最小值。",
            "type": "number"
          },
          "fromMaxValue": {
            "description": "指定感兴趣的数值范围，传入类型为double类型。表示使用当前图像的最大值。",
            "type": "number"
          },
          "toMinValue": {
            "description": "指定目标的数值范围，传入类型为double类型。表示使用图像位深的理论数值范围的最小值，对于 8 位图使用 0 ~ 255，对于 16 位图使用 0 ~ 65535 ",
            "type": "number"
          },
          "toMaxValue": {
            "description": "指定目标的数值范围，传入类型为double类型。表示使用图像位深的理论数值范围的最大值，对于 8 位图使用 0 ~ 255，对于 16 位图使用 0 ~ 65535 ",
            "type": "number"
          }
        },
        "required": [
          "imageUrl",
          "fromMinValue",
          "fromMaxValue",
          "toMinValue",
          "toMaxValue"
        ]
      }
    },
    {
      "name": "ILImageOp_Transform",
      "description": "这个是应用指定的变换矩阵到输入图像的工具。得到一个新的图像。若指定的结果图像对象为空图像，则生成和输入图像尺寸相同的图像。否则，将保持结果图像的尺寸，超出图像范围的像素设为背景像素（默认为黑色）。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
      "inputSchema": {
        "title": "ILImageOp_Transform",
        "description": "这个是应用指定的变换矩阵到输入图像的工具。得到一个新的图像。若指定的结果图像对象为空图像，则生成和输入图像尺寸相同的图像。否则，将保持结果图像的尺寸，超出图像范围的像素设为背景像素（默认为黑色）。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
        "type": "object",
        "properties": {
          "imageUrl": {
            "description": "图片的url地址，通过这个地址获取到图片",
            "type": "string"
          },
          "tf": {
            "description": "变换矩阵，传入类型为ILTransform类型。",
            "type": "object"
          },
          "interMethod": {
            "description": "插值方法，传入类型为LPVInterpolationMethod类型。",
            "type": "integer"
          }
        },
        "required": [
          "imageUrl",
          "tf",
          "interMethod"
        ]
      }
    },
    {
      "name": "ILImageOp_Sub",
      "description": "这个是将两个图像逐像素相减的工具。输出一个新图像，两个输入图像需尺寸相同、类型相同。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
      "inputSchema": {
        "title": "ILImageOp_Sub",
        "description": "这个是将两个图像逐像素相减的工具。输出一个新图像，两个输入图像需尺寸相同、类型相同。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
        "type": "object",
        "properties": {
          "imageUrl1": {
            "description": "图片的url地址，通过这个地址获取到图片1",
            "type": "string"
          },
          "imageUrl2": {
            "description": "图片的url地址，通过这个地址获取到图片2",
            "type": "string"
          }
        },
        "required": [
          "imageUrl1",
          "imageUrl2"
        ]
      }
    },
    {
      "name": "ILImageOp_DivideScalar",
      "description": "这个是将输入图像逐像素除以一个标量的工具。输出一个新图像。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
      "inputSchema": {
        "title": "ILImageOp_DivideScalar",
        "description": "这个是将输入图像逐像素除以一个标量的工具。输出一个新图像。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
        "type": "object",
        "properties": {
          "imageUrl": {
            "description": "图片的url地址，通过这个地址获取到图片",
            "type": "string"
          },
          "scalar": {
            "description": "输入的标量，传入类型为double类型。",
            "type": "number"
          },
          "scalar2": {
            "description": "用于为彩色图像指定第二个通道使用的标量值，传入类型为double类型，若 scalar2 和 scalar3 都设置为 0（默认值），则对所有通道均使用 scalar 数值。",
            "type": "number"
          },
          "scalar3": {
            "description": "用于为彩色图像指定第三个通道使用的标量值，传入类型为double类型。",
            "type": "number"
          }
        },
        "required": [
          "imageUrl",
          "scalar",
          "scalar2",
          "scalar3"
        ]
      }
    },
    {
      "name": "ILImageOp_Add",
      "description": "这个是将两个图像逐像素相加的工具。输出一个新图像。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
      "inputSchema": {
        "title": "ILImageOp_Add",
        "description": "这个是将两个图像逐像素相加的工具。输出一个新图像。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
        "type": "object",
        "properties": {
          "imageUrl1": {
            "description": "图片的url地址，通过这个地址获取到图片1",
            "type": "string"
          },
          "imageUrl2": {
            "description": "图片的url地址，通过这个地址获取到图片2",
            "type": "string"
          }
        },
        "required": [
          "imageUrl1",
          "imageUrl2"
        ]
      }
    },
    {
      "name": "EdgeFilterGradientFull",
      "description": "提供了图像边缘增强的功能，在全梯度，水平和垂直边缘在输出图像中均表现为较亮的像素。\r\n 返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址",
      "inputSchema": {
        "title": "EdgeFilterGradientFull",
        "description": "提供了图像边缘增强的功能，在全梯度，水平和垂直边缘在输出图像中均表现为较亮的像素。\r\n 返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址",
        "type": "object",
        "properties": {
          "imageUrl": {
            "description": "图片的url地址，通过这个地址获取到输入图像",
            "type": "string"
          },
          "edgeFilterClassObjDescriptionJson": {
            "description": "用于图像边缘增强的功能调用的对象。如果用户没有指定图像边缘增强的功能相关对象，请创建一个图像边缘增强的功能调用的对象后传入。\r\n如果用户指定图像边缘增强的功能相关对象，传入一个序列化的JSON字符串，属性包括：LpvClassName(调用工具函数的名称) 和 InputParameterFile(调用工具函数需要传入的参数文件名称)。这两个属性的值可以从前处理的MCP工具的返回值中获取。LpvClassName 表示图像边缘增强的功能调用的对象名称，目前名称应为：ILEdgeFilter (图像边缘增强的功能相关对象);\r\nInputParameterFile 表示调用工具函数需要传入的参数文件名称。\r\n",
            "type": "string"
          }
        },
        "required": [
          "imageUrl",
          "edgeFilterClassObjDescriptionJson"
        ]
      }
    },
    {
      "name": "ILImageFilter_Gaussian",
      "description": "这个是高斯滤波工具。\r\n用户没有指定滤波相关参数时，不要调用设置参数的插件，传入的ILImageFilter 类的文件中已经设置了滤波相关的默认参数。\r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
      "inputSchema": {
        "title": "ILImageFilter_Gaussian",
        "description": "这个是高斯滤波工具。\r\n用户没有指定滤波相关参数时，不要调用设置参数的插件，传入的ILImageFilter 类的文件中已经设置了滤波相关的默认参数。\r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
        "type": "object",
        "properties": {
          "imageUrl": {
            "description": "图片的url地址，通过这个地址获取到图片",
            "type": "string"
          },
          "InputParameterFile": {
            "description": "指定的 ILImageFilter 类的文件地址，调用工具函数需要传入的参数文件名称。在调用此工具前要保证前处理中一定要有且仅有一次的 ILImageFilter 初始化工具调用。这个属性的值需要从前处理的MCP工具的返回值 InputParameterFile 字段中获取。",
            "type": "string"
          }
        },
        "required": [
          "imageUrl",
          "InputParameterFile"
        ]
      }
    },
    {
      "name": "ILImageFilter",
      "description": "这个是个图像滤波相关的初始化工具，初始化创建一个图像滤波工具的功能调用的对象。\r\n 是所有图像滤波工具下的MCP工具的初始化工具，在这些工具调用之前，都需要保证前处理调用过有且仅有一次此初始化工具。返回结构是一个序列化的JSON字符串，属性包括：\r\nLpvClassName(调用工具函数的名称) 和 InputParameterFile(调用工具函数需要传入的参数文件名称)。\r\nLpvClassName 表示图像滤波工具的功能调用的对象名称，目前名称应为：ILImageFilter (图像滤波工具的功能调用的对象)。\r\nInputParameterFile 表示 ILImageFilter 类初始化文件名称。\r\n",
      "inputSchema": {
        "title": "ILImageFilter",
        "description": "这个是个图像滤波相关的初始化工具，初始化创建一个图像滤波工具的功能调用的对象。\r\n 是所有图像滤波工具下的MCP工具的初始化工具，在这些工具调用之前，都需要保证前处理调用过有且仅有一次此初始化工具。返回结构是一个序列化的JSON字符串，属性包括：\r\nLpvClassName(调用工具函数的名称) 和 InputParameterFile(调用工具函数需要传入的参数文件名称)。\r\nLpvClassName 表示图像滤波工具的功能调用的对象名称，目前名称应为：ILImageFilter (图像滤波工具的功能调用的对象)。\r\nInputParameterFile 表示 ILImageFilter 类初始化文件名称。\r\n",
        "type": "object",
        "properties": {}
      }
    },
    {
      "name": "NormalizeTo16",
      "description": "归一化输入图像到 16 位图\r\n 返回结构是一个序列化的JSON字符串，包含以下字段：\r\nResultImg: 输出结果图像URL地址",
      "inputSchema": {
        "title": "NormalizeTo16",
        "description": "归一化输入图像到 16 位图\r\n 返回结构是一个序列化的JSON字符串，包含以下字段：\r\nResultImg: 输出结果图像URL地址",
        "type": "object",
        "properties": {
          "imageUrl": {
            "description": "图片的url地址，通过这个地址获取到输入图像",
            "type": "string"
          },
          "minValue": {
            "description": "最小值，传入0表示使用图像最小值",
            "type": "number",
            "default": 0
          },
          "maxValue": {
            "description": "最大值，传入0表示使用图像最大值",
            "type": "number",
            "default": 0
          }
        },
        "required": [
          "imageUrl"
        ]
      }
    },
    {
      "name": "ILImageFilter_FillHole",
      "description": "这个是修补输入图像中的孔洞工具，基于临近像素的数值重建孔洞中的缺失像素。\r\n用户没有指定滤波相关参数时，不要调用设置参数的插件，传入的ILImageFilter 类的文件中已经设置了滤波相关的默认参数。\r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
      "inputSchema": {
        "title": "ILImageFilter_FillHole",
        "description": "这个是修补输入图像中的孔洞工具，基于临近像素的数值重建孔洞中的缺失像素。\r\n用户没有指定滤波相关参数时，不要调用设置参数的插件，传入的ILImageFilter 类的文件中已经设置了滤波相关的默认参数。\r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
        "type": "object",
        "properties": {
          "imageUrl": {
            "description": "图片的url地址，通过这个地址获取到图片",
            "type": "string"
          },
          "maskImageUrl": {
            "description": "图片的url地址，孔洞的蒙版图像，与输入图像尺寸相同。白色像素表示孔洞。 ",
            "type": "string"
          },
          "InputParameterFile": {
            "description": "指定的 ILImageFilter 类的文件地址，调用工具函数需要传入的参数文件名称。在调用此工具前要保证前处理中一定要有且仅有一次的 ILImageFilter 初始化工具调用。这个属性的值需要从前处理的MCP工具的返回值 InputParameterFile 字段中获取。",
            "type": "string"
          }
        },
        "required": [
          "imageUrl",
          "maskImageUrl",
          "InputParameterFile"
        ]
      }
    },
    {
      "name": "ILImageOp_GainOffset",
      "description": "这个是图像增益和偏移的工具。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
      "inputSchema": {
        "title": "ILImageOp_GainOffset",
        "description": "这个是图像增益和偏移的工具。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
        "type": "object",
        "properties": {
          "imageUrl": {
            "description": "图片的url地址，通过这个地址获取到图片",
            "type": "string"
          },
          "gain": {
            "description": "增益值，传入类型为double类型。",
            "type": "number"
          },
          "offset": {
            "description": "偏移值，传入类型为double类型。",
            "type": "number"
          }
        },
        "required": [
          "imageUrl",
          "gain",
          "offset"
        ]
      }
    },
    {
      "name": "BGRToGray",
      "description": "将 BGR 彩色图像转换为灰度图\r\n 返回结构是一个序列化的JSON字符串，包含以下字段：\r\nResultImg: 输出结果图像URL地址",
      "inputSchema": {
        "title": "BGRToGray",
        "description": "将 BGR 彩色图像转换为灰度图\r\n 返回结构是一个序列化的JSON字符串，包含以下字段：\r\nResultImg: 输出结果图像URL地址",
        "type": "object",
        "properties": {
          "imageUrl": {
            "description": "图片的url地址，通过这个地址获取到输入图像",
            "type": "string"
          }
        },
        "required": [
          "imageUrl"
        ]
      }
    },
    {
      "name": "ILImageThreshold_Binarize",
      "description": "这个是二值化图像工具。二值化输入图像并输出结果图像。如果用户同时设置了阈值，要先执行设置阈值工具，然后再执行此工具。返回结构是一个序列化的json，其中LpvClassName 表示调用工具函数的名称；InputParameterFile 表示调用工具函数需要传入的参数文件名称;result 属性是输入图像二值化结果的图片地址",
      "inputSchema": {
        "title": "ILImageThreshold_Binarize",
        "description": "这个是二值化图像工具。二值化输入图像并输出结果图像。如果用户同时设置了阈值，要先执行设置阈值工具，然后再执行此工具。返回结构是一个序列化的json，其中LpvClassName 表示调用工具函数的名称；InputParameterFile 表示调用工具函数需要传入的参数文件名称;result 属性是输入图像二值化结果的图片地址",
        "type": "object",
        "properties": {
          "imageUrl": {
            "description": "图片的url地址，通过这个地址获取到图片",
            "type": "string"
          },
          "InputParameterFile": {
            "description": "指定的 ILImageThreshold 类的文件地址，调用工具函数需要传入的参数文件名称。在调用此工具前要保证前处理中一定要有且仅有一次的 ILImageThreshold 初始化工具调用。这个属性的值需要从前处理的MCP工具的返回值 InputParameterFile 字段中获取。",
            "type": "string"
          }
        },
        "required": [
          "imageUrl",
          "InputParameterFile"
        ]
      }
    },
    {
      "name": "ILImageOp_Invert",
      "description": "这个是反转图像的工具。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
      "inputSchema": {
        "title": "ILImageOp_Invert",
        "description": "这个是反转图像的工具。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
        "type": "object",
        "properties": {
          "imageUrl": {
            "description": "图片的url地址，通过这个地址获取到图片",
            "type": "string"
          }
        },
        "required": [
          "imageUrl"
        ]
      }
    },
    {
      "name": "ILImageOp_Max",
      "description": "这个是将两个图像逐像素比较，取其最大值的工具。输出一个新图像，两个输入图像需尺寸相同、类型相同。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
      "inputSchema": {
        "title": "ILImageOp_Max",
        "description": "这个是将两个图像逐像素比较，取其最大值的工具。输出一个新图像，两个输入图像需尺寸相同、类型相同。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
        "type": "object",
        "properties": {
          "imageUrl1": {
            "description": "图片的url地址，通过这个地址获取到图片1",
            "type": "string"
          },
          "imageUrl2": {
            "description": "图片的url地址，通过这个地址获取到图片2",
            "type": "string"
          }
        },
        "required": [
          "imageUrl1",
          "imageUrl2"
        ]
      }
    },
    {
      "name": "ColorMapMultiBand",
      "description": "对输入图像应用多周期的颜色映射表，生成伪彩图\r\n 返回结构是一个序列化的JSON字符串，包含以下字段：\r\nResultImg: 输出结果图像URL地址",
      "inputSchema": {
        "title": "ColorMapMultiBand",
        "description": "对输入图像应用多周期的颜色映射表，生成伪彩图\r\n 返回结构是一个序列化的JSON字符串，包含以下字段：\r\nResultImg: 输出结果图像URL地址",
        "type": "object",
        "properties": {
          "imageUrl": {
            "description": "图片的url地址，通过这个地址获取到输入图像",
            "type": "string"
          },
          "colorMapType": {
            "description": "颜色映射表类型，例如：LPVColorMap.Jet",
            "type": "string"
          },
          "inverse": {
            "description": "是否反向映射",
            "type": "boolean",
            "default": false
          },
          "normalize": {
            "description": "是否归一化",
            "type": "boolean",
            "default": false
          },
          "minValue": {
            "description": "最小值",
            "type": "number",
            "default": 0
          },
          "maxValue": {
            "description": "最大值",
            "type": "number",
            "default": 0
          },
          "bandCount": {
            "description": "颜色映射表的周期数，默认为3",
            "type": "integer",
            "default": 3
          }
        },
        "required": [
          "imageUrl",
          "colorMapType"
        ]
      }
    },
    {
      "name": "ILImageOp_Rotate",
      "description": "这个是顺时针旋转输入图像的工具。输出一个新图像，使用图像中心作为旋转中心。若指定的结果图像对象为空图像，则生成和输入图像尺寸相同的图像。否则，将保持结果图像的尺寸，超出图像范围的像素设为背景像素（默认为黑色）。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
      "inputSchema": {
        "title": "ILImageOp_Rotate",
        "description": "这个是顺时针旋转输入图像的工具。输出一个新图像，使用图像中心作为旋转中心。若指定的结果图像对象为空图像，则生成和输入图像尺寸相同的图像。否则，将保持结果图像的尺寸，超出图像范围的像素设为背景像素（默认为黑色）。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
        "type": "object",
        "properties": {
          "imageUrl": {
            "description": "图片的url地址，通过这个地址获取到图片",
            "type": "string"
          },
          "angle": {
            "description": "旋转角度，传入类型为double类型。",
            "type": "number"
          },
          "interMethod": {
            "description": "插值方法，传入类型为LPVInterpolationMethod类型。",
            "type": "integer"
          }
        },
        "required": [
          "imageUrl",
          "angle",
          "interMethod"
        ]
      }
    },
    {
      "name": "BGRMix",
      "description": "根据指定的各通道权重，混合 BGR 彩色图像的三个通道\r\n 返回结构是一个序列化的JSON字符串，包含以下字段：\r\nResultImg: 输出结果图像URL地址",
      "inputSchema": {
        "title": "BGRMix",
        "description": "根据指定的各通道权重，混合 BGR 彩色图像的三个通道\r\n 返回结构是一个序列化的JSON字符串，包含以下字段：\r\nResultImg: 输出结果图像URL地址",
        "type": "object",
        "properties": {
          "imageUrl": {
            "description": "图片的url地址，通过这个地址获取到输入图像",
            "type": "string"
          },
          "w0": {
            "description": "蓝色通道的权重，取值范围为 -255 ~ 255",
            "type": "number"
          },
          "w1": {
            "description": "绿色通道的权重，取值范围为 -255 ~ 255",
            "type": "number"
          },
          "w2": {
            "description": "红色通道的权重，取值范围为 -255 ~ 255",
            "type": "number"
          }
        },
        "required": [
          "imageUrl",
          "w0",
          "w1",
          "w2"
        ]
      }
    },
    {
      "name": "ConvertColor",
      "description": "颜色空间转换\r\n 返回结构是一个序列化的JSON字符串，包含以下字段：\r\nBlue: 转换后的蓝色通道值\r\nGreen: 转换后的绿色通道值\r\nRed: 转换后的红色通道值",
      "inputSchema": {
        "title": "ConvertColor",
        "description": "颜色空间转换\r\n 返回结构是一个序列化的JSON字符串，包含以下字段：\r\nBlue: 转换后的蓝色通道值\r\nGreen: 转换后的绿色通道值\r\nRed: 转换后的红色通道值",
        "type": "object",
        "properties": {
          "fromColorSpace": {
            "description": "源颜色空间，例如：LPVColorSpaceBGR（BGR颜色空间，通道顺序为B、G、R）、LPVColorSpaceHSV（HSV颜色空间，通道顺序为H、S、V）、LPVColorSpaceHLS（HLS颜色空间，通道顺序为H、L、S）、LPVColorSpaceYCrCb（YCrCb颜色空间，通道顺序为Y、Cr、Cb）、LPVColorSpaceYUV（YUV颜色空间，通道顺序为Y、U、V）、LPVColorSpaceXYZ（CIE 1931 XYZ颜色空间，通道顺序为X、Y、Z）、LPVColorSpaceLAB（CIE 1976 L*a*b*颜色空间，通道顺序为L、a*、b*）、LPVColorSpaceLUV（CIE 1976 L*u*v*颜色空间，通道顺序为L*、u*、v*）",
            "type": "string"
          },
          "toColorSpace": {
            "description": "目标颜色空间，例如：LPVColorSpaceBGR（BGR颜色空间，通道顺序为B、G、R）、LPVColorSpaceHSV（HSV颜色空间，通道顺序为H、S、V）、LPVColorSpaceHLS（HLS颜色空间，通道顺序为H、L、S）、LPVColorSpaceYCrCb（YCrCb颜色空间，通道顺序为Y、Cr、Cb）、LPVColorSpaceYUV（YUV颜色空间，通道顺序为Y、U、V）、LPVColorSpaceXYZ（CIE 1931 XYZ颜色空间，通道顺序为X、Y、Z）、LPVColorSpaceLAB（CIE 1976 L*a*b*颜色空间，通道顺序为L、a*、b*）、LPVColorSpaceLUV（CIE 1976 L*u*v*颜色空间，通道顺序为L*、u*、v*）",
            "type": "string"
          },
          "v0": {
            "description": "蓝色/H通道值，范围0-255",
            "type": "integer"
          },
          "v1": {
            "description": "绿色/S通道值，范围0-255",
            "type": "integer"
          },
          "v2": {
            "description": "红色/V通道值，范围0-255",
            "type": "integer"
          }
        },
        "required": [
          "fromColorSpace",
          "toColorSpace",
          "v0",
          "v1",
          "v2"
        ]
      }
    },
    {
      "name": "ILImageOp_Resize",
      "description": "这个是缩放输入图像的工具。按照给定的缩放比例。若指定的结果图像对象为空图像，则生成和输入图像尺寸相同的图像。否则，将保持结果图像的尺寸，超出图像范围的像素设为背景像素（默认为黑色）。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
      "inputSchema": {
        "title": "ILImageOp_Resize",
        "description": "这个是缩放输入图像的工具。按照给定的缩放比例。若指定的结果图像对象为空图像，则生成和输入图像尺寸相同的图像。否则，将保持结果图像的尺寸，超出图像范围的像素设为背景像素（默认为黑色）。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
        "type": "object",
        "properties": {
          "imageUrl": {
            "description": "图片的url地址，通过这个地址获取到图片",
            "type": "string"
          },
          "zoomX": {
            "description": "x 方向的缩放比例，传入类型为double类型。",
            "type": "number"
          },
          "zoomY": {
            "description": "y 方向的缩放比例，传入类型为double类型。",
            "type": "number"
          },
          "interMethod": {
            "description": "插值方法，传入类型为LPVInterpolationMethod类型。",
            "type": "integer"
          }
        },
        "required": [
          "imageUrl",
          "zoomX",
          "zoomY",
          "interMethod"
        ]
      }
    },
    {
      "name": "ILImageOp_ProjectY",
      "description": "这个是垂直投影图像的工具。聚合每一列上的像素。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
      "inputSchema": {
        "title": "ILImageOp_ProjectY",
        "description": "这个是垂直投影图像的工具。聚合每一列上的像素。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
        "type": "object",
        "properties": {
          "imageUrl": {
            "description": "图片的url地址，通过这个地址获取到图片",
            "type": "string"
          },
          "aggType": {
            "description": "投影时所使用的聚合方式，传入类型为LPVAggregation类型。有效的类型为：0：LPVAggAvg（均值：降低图像噪声，在光照条件不佳、亮度不断变化的场景下，获得更稳定的图像质量。）、1：LPVAggDev（标准差：结果图像中的较亮像素表示在多帧图像中该位置的像素值变化较大。）、2：LPVAggVar（方差）、3：LPVAggMin（最小值：减少亮部区域，例如，用于减少过曝区域。）、4：LPVAggMax（最大值：减少暗部区域，减少阴影。）、5：LPVAggMajor（主要成分均值）、6：LPVAggSum（所有值的和）",
            "type": "integer"
          }
        },
        "required": [
          "imageUrl",
          "aggType"
        ]
      }
    },
    {
      "name": "ILImageOp_MaxScalar",
      "description": "这个是将输入图像和一个标量逐像素比较，取其最大值的工具。输出一个新图像。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
      "inputSchema": {
        "title": "ILImageOp_MaxScalar",
        "description": "这个是将输入图像和一个标量逐像素比较，取其最大值的工具。输出一个新图像。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
        "type": "object",
        "properties": {
          "imageUrl": {
            "description": "图片的url地址，通过这个地址获取到图片",
            "type": "string"
          },
          "scalar": {
            "description": "输入的标量，传入类型为double类型。",
            "type": "number"
          },
          "scalar2": {
            "description": "用于为彩色图像指定第二个通道使用的标量值，传入类型为double类型，若 scalar2 和 scalar3 都设置为 0（默认值），则对所有通道均使用 scalar 数值。",
            "type": "number"
          },
          "scalar3": {
            "description": "用于为彩色图像指定第三个通道使用的标量值，传入类型为double类型。",
            "type": "number"
          }
        },
        "required": [
          "imageUrl",
          "scalar",
          "scalar2",
          "scalar3"
        ]
      }
    },
    {
      "name": "ILImageOp_SplitY",
      "description": "这个是垂直拆分一个图像的工具。为若干个小图 。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
      "inputSchema": {
        "title": "ILImageOp_SplitY",
        "description": "这个是垂直拆分一个图像的工具。为若干个小图 。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
        "type": "object",
        "properties": {
          "imageUrl": {
            "description": "图片的url地址，通过这个地址获取到图片",
            "type": "string"
          },
          "count": {
            "description": "指定拆分数量，传入类型为int类型。",
            "type": "integer"
          },
          "step": {
            "description": "单次拆分的步长，传入类型为int类型。对于非循环模式，其通常等于结果图像的高。而对于循环模式，这表示每次拆分所收集的行数，多次拆分组合为最终结果。",
            "type": "integer"
          },
          "space": {
            "description": "拆分的间隔，传入类型为int类型。",
            "type": "integer"
          },
          "cyclicMode": {
            "description": "是否启用循环拆分，传入类型为bool类型。默认启用。循环模型将循环重复拆分整张图像，再合并单次拆分的若干行为一张图像，作为最终结果。",
            "type": "boolean"
          },
          "sameSize": {
            "description": "输出的结果图像图像队列，传入类型为bool类型。从上到下。",
            "type": "boolean"
          }
        },
        "required": [
          "imageUrl",
          "count",
          "step",
          "space",
          "cyclicMode",
          "sameSize"
        ]
      }
    },
    {
      "name": "BGRToGrayColor",
      "description": "将 BGR 颜色值转换为灰度值\r\n 返回结构是一个序列化的JSON字符串，包含以下字段：\r\nGrayValue: 转换后的灰度值",
      "inputSchema": {
        "title": "BGRToGrayColor",
        "description": "将 BGR 颜色值转换为灰度值\r\n 返回结构是一个序列化的JSON字符串，包含以下字段：\r\nGrayValue: 转换后的灰度值",
        "type": "object",
        "properties": {
          "blue": {
            "description": "蓝色通道值，范围0-255",
            "type": "integer"
          },
          "green": {
            "description": "绿色通道值，范围0-255",
            "type": "integer"
          },
          "red": {
            "description": "红色通道值，范围0-255",
            "type": "integer"
          }
        },
        "required": [
          "blue",
          "green",
          "red"
        ]
      }
    },
    {
      "name": "ILImageOp_AddWeighted",
      "description": "这个是将两个图像逐像素相加的工具。输出一个新图像，两个输入图像的尺寸需相同、类型相同。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
      "inputSchema": {
        "title": "ILImageOp_AddWeighted",
        "description": "这个是将两个图像逐像素相加的工具。输出一个新图像，两个输入图像的尺寸需相同、类型相同。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
        "type": "object",
        "properties": {
          "imageUrl1": {
            "description": "图片的url地址，通过这个地址获取到图片1",
            "type": "string"
          },
          "imageUrl2": {
            "description": "图片的url地址，通过这个地址获取到图片2",
            "type": "string"
          },
          "alpha": {
            "description": "第一个输入图像的权重 ，传入类型为double类型。",
            "type": "number"
          },
          "beta": {
            "description": "第二个输入图像的权重 ，传入类型为double类型。",
            "type": "number"
          }
        },
        "required": [
          "imageUrl1",
          "imageUrl2",
          "alpha",
          "beta"
        ]
      }
    },
    {
      "name": "ILImageFilter_LinearFilter",
      "description": "这个是线性滤波工具，基于自定义核，对输入图像进行线性滤波。超出深度范围的结果像素值将被截断，例如，对于 8 位图像，截断到 0 ~ 255 的数值范围。 \r\n用户没有指定滤波相关参数时，不要调用设置参数的插件，传入的ILImageFilter 类的文件中已经设置了滤波相关的默认参数。\r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
      "inputSchema": {
        "title": "ILImageFilter_LinearFilter",
        "description": "这个是线性滤波工具，基于自定义核，对输入图像进行线性滤波。超出深度范围的结果像素值将被截断，例如，对于 8 位图像，截断到 0 ~ 255 的数值范围。 \r\n用户没有指定滤波相关参数时，不要调用设置参数的插件，传入的ILImageFilter 类的文件中已经设置了滤波相关的默认参数。\r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
        "type": "object",
        "properties": {
          "imageUrl": {
            "description": "图片的url地址，通过这个地址获取到图片",
            "type": "string"
          },
          "kWidth": {
            "description": "滤波核的宽度，传入类型为int类型,自定义核的宽度，取值范围为 1 ~ 9999。\r\n",
            "type": "integer"
          },
          "kHeight": {
            "description": "滤波核的高度，传入类型为int类型，自定义核的高度，取值范围为 1 ~ 9999。\r\n",
            "type": "integer"
          },
          "kMat": {
            "description": "滤波核的高度，传入类型为Array<double>类型，自定义核的数据，这是一组浮点数值 。\r\n",
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "InputParameterFile": {
            "description": "指定的 ILImageFilter 类的文件地址，调用工具函数需要传入的参数文件名称。在调用此工具前要保证前处理中一定要有且仅有一次的 ILImageFilter 初始化工具调用。这个属性的值需要从前处理的MCP工具的返回值 InputParameterFile 字段中获取。",
            "type": "string"
          }
        },
        "required": [
          "imageUrl",
          "kWidth",
          "kHeight",
          "kMat",
          "InputParameterFile"
        ]
      }
    },
    {
      "name": "EdgeFilterGradientH",
      "description": "提供了图像边缘增强的功能，在水平梯度，水平边缘在输出图像中表现为较亮的像素。 \r\n 返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址",
      "inputSchema": {
        "title": "EdgeFilterGradientH",
        "description": "提供了图像边缘增强的功能，在水平梯度，水平边缘在输出图像中表现为较亮的像素。 \r\n 返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址",
        "type": "object",
        "properties": {
          "imageUrl": {
            "description": "图片的url地址，通过这个地址获取到输入图像",
            "type": "string"
          },
          "edgeFilterClassObjDescriptionJson": {
            "description": "用于图像边缘增强的功能调用的对象。如果用户没有指定图像边缘增强的功能相关对象，请创建一个图像边缘增强的功能调用的对象后传入。\r\n如果用户指定图像边缘增强的功能相关对象，传入一个序列化的JSON字符串，属性包括：LpvClassName(调用工具函数的名称) 和 InputParameterFile(调用工具函数需要传入的参数文件名称)。这两个属性的值可以从前处理的MCP工具的返回值中获取。LpvClassName 表示图像边缘增强的功能调用的对象名称，目前名称应为：ILEdgeFilter (图像边缘增强的功能相关对象);\r\nInputParameterFile 表示调用工具函数需要传入的参数文件名称。\r\n",
            "type": "string"
          }
        },
        "required": [
          "imageUrl",
          "edgeFilterClassObjDescriptionJson"
        ]
      }
    },
    {
      "name": "ILImageOp_TileX",
      "description": "这个是将水平平铺一组图像，合成一张大尺寸图像的工具。输出一个新图像。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
      "inputSchema": {
        "title": "ILImageOp_TileX",
        "description": "这个是将水平平铺一组图像，合成一张大尺寸图像的工具。输出一个新图像。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
        "type": "object",
        "properties": {
          "imageUrlList": {
            "description": "图片的url地址队列，通过这个地址获取到图片",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "columnCount": {
            "description": "每行的图像个数，传入类型为int类型。若队列中的图像总数不被整除，则最后一行的剩余像素将被填充为背景色。传入 0 或负数，用于生成单行的合成图像。",
            "type": "integer"
          },
          "compactMode": {
            "description": "紧凑模式开关，传入类型为bool类型。在紧凑模式下（True），一行中的图像被紧密地连续排布。否则（False），结果图像的尺寸由输入图像中的最大长宽决定，其中较小的图像将被放置在对应行列的中心。",
            "type": "boolean"
          }
        },
        "required": [
          "imageUrlList",
          "columnCount",
          "compactMode"
        ]
      }
    },
    {
      "name": "ILImageThreshold_SetThresholdAdaptGlobald",
      "description": "这个是 设置并使用全局自适应阈值 工具。返回结构是一个序列化的json，其中LpvClassName 表示调用工具函数的名称；InputParameterFile 表示调用工具函数需要传入的参数文件名称;",
      "inputSchema": {
        "title": "ILImageThreshold_SetThresholdAdaptGlobald",
        "description": "这个是 设置并使用全局自适应阈值 工具。返回结构是一个序列化的json，其中LpvClassName 表示调用工具函数的名称；InputParameterFile 表示调用工具函数需要传入的参数文件名称;",
        "type": "object",
        "properties": {
          "lbBias": {
            "description": "基于全局自适应阈值的下限修正值",
            "type": "integer"
          },
          "ubBias": {
            "description": "基于全局自适应阈值的上限修正值",
            "type": "integer"
          },
          "InputParameterFile": {
            "description": "指定的 ILImageThreshold 类的文件地址，调用工具函数需要传入的参数文件名称。在调用此工具前要保证前处理中一定要有且仅有一次的 ILImageThreshold 初始化工具调用。这个属性的值需要从前处理的MCP工具的返回值 InputParameterFile 字段中获取。",
            "type": "string"
          }
        },
        "required": [
          "lbBias",
          "ubBias",
          "InputParameterFile"
        ]
      }
    },
    {
      "name": "ILImageFilter_SetKernelSize",
      "description": "设置图像滤波工具所使用的滤波核的核尺寸 ,并返回设置完成的图像滤波工具的功能调用的对象。\r\n 返回结构是一个序列化的JSON字符串，属性包括：\r\nLpvClassName(调用工具函数的名称) 和 InputParameterFile(调用工具函数需要传入的参数文件名称)。这两个属性的值可以从前处理的MCP工具的返回值中获取。LpvClassName 表示图像滤波工具的功能调用的对象名称，目前名称应为：ILImageFilter (图像滤波工具的功能相关对象);\r\nInputParameterFile 表示图像滤波工具的功能调用的对象的参数文件名称。\r\n",
      "inputSchema": {
        "title": "ILImageFilter_SetKernelSize",
        "description": "设置图像滤波工具所使用的滤波核的核尺寸 ,并返回设置完成的图像滤波工具的功能调用的对象。\r\n 返回结构是一个序列化的JSON字符串，属性包括：\r\nLpvClassName(调用工具函数的名称) 和 InputParameterFile(调用工具函数需要传入的参数文件名称)。这两个属性的值可以从前处理的MCP工具的返回值中获取。LpvClassName 表示图像滤波工具的功能调用的对象名称，目前名称应为：ILImageFilter (图像滤波工具的功能相关对象);\r\nInputParameterFile 表示图像滤波工具的功能调用的对象的参数文件名称。\r\n",
        "type": "object",
        "properties": {
          "kWidth": {
            "description": "滤波核的宽度,传入类型为int类型,需要是一个 3 ~ 31 之间的奇数，如 3, 5, 7 等。\r\n",
            "type": "integer"
          },
          "kHeight": {
            "description": "滤波核的高度,传入类型为int类型，需要是一个 3 ~ 31 之间的奇数，如 3, 5, 7 等。若设置为 0，则使用与宽度相同。\r\n",
            "type": "integer"
          },
          "InputParameterFile": {
            "description": "指定的 ILImageFilter 类的文件地址，调用工具函数需要传入的参数文件名称。在调用此工具前要保证前处理中一定要有且仅有一次的 ILImageFilter 初始化工具调用。这个属性的值需要从前处理的MCP工具的返回值 InputParameterFile 字段中获取。",
            "type": "string"
          }
        },
        "required": [
          "kWidth",
          "kHeight",
          "InputParameterFile"
        ]
      }
    },
    {
      "name": "ILImageOp_Divide",
      "description": "这个是将第一个输入图像逐像素除以第二个输入图像的像素的工具。输出一个新图像，对于第二个图像中的 0 像素，输出结果为 0。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
      "inputSchema": {
        "title": "ILImageOp_Divide",
        "description": "这个是将第一个输入图像逐像素除以第二个输入图像的像素的工具。输出一个新图像，对于第二个图像中的 0 像素，输出结果为 0。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
        "type": "object",
        "properties": {
          "imageUrl1": {
            "description": "图片的url地址，通过这个地址获取到图片1",
            "type": "string"
          },
          "imageUrl2": {
            "description": "图片的url地址，通过这个地址获取到图片2",
            "type": "string"
          }
        },
        "required": [
          "imageUrl1",
          "imageUrl2"
        ]
      }
    },
    {
      "name": "ILImageOp_SplitX",
      "description": "这个是水平拆分一个图像的工具。为若干个小图 。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
      "inputSchema": {
        "title": "ILImageOp_SplitX",
        "description": "这个是水平拆分一个图像的工具。为若干个小图 。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
        "type": "object",
        "properties": {
          "imageUrl": {
            "description": "图片的url地址，通过这个地址获取到图片",
            "type": "string"
          },
          "count": {
            "description": "指定拆分数量，传入类型为int类型。",
            "type": "integer"
          },
          "step": {
            "description": "单次拆分的步长，传入类型为int类型。对于非循环模式，其通常等于结果图像的宽。而对于循环模式，这表示每次拆分所收集的列数，多次拆分组合为最终结果。",
            "type": "integer"
          },
          "space": {
            "description": "拆分的间隔，传入类型为int类型。",
            "type": "integer"
          },
          "cyclicMode": {
            "description": "是否启用循环拆分，传入类型为bool类型。默认启用。循环模型将循环重复拆分整张图像，再合并单次拆分的若干列为一张图像，作为最终结果。",
            "type": "boolean"
          },
          "sameSize": {
            "description": "输出的结果图像图像队列，传入类型为bool类型。从上到下。",
            "type": "boolean"
          }
        },
        "required": [
          "imageUrl",
          "count",
          "step",
          "space",
          "cyclicMode",
          "sameSize"
        ]
      }
    },
    {
      "name": "ILImageFilter_Equalize",
      "description": "这个是均衡化工具。该工具将归一化亮度，增加图像对比度。 均衡化工具不是一个线性滤波器，因此不需要指定滤波核尺寸。\r\n用户没有指定滤波相关参数时，不要调用设置参数的插件，传入的ILImageFilter 类的文件中已经设置了滤波相关的默认参数。\r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
      "inputSchema": {
        "title": "ILImageFilter_Equalize",
        "description": "这个是均衡化工具。该工具将归一化亮度，增加图像对比度。 均衡化工具不是一个线性滤波器，因此不需要指定滤波核尺寸。\r\n用户没有指定滤波相关参数时，不要调用设置参数的插件，传入的ILImageFilter 类的文件中已经设置了滤波相关的默认参数。\r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
        "type": "object",
        "properties": {
          "imageUrl": {
            "description": "图片的url地址，通过这个地址获取到图片",
            "type": "string"
          },
          "InputParameterFile": {
            "description": "指定的 ILImageFilter 类的文件地址，调用工具函数需要传入的参数文件名称。在调用此工具前要保证前处理中一定要有且仅有一次的 ILImageFilter 初始化工具调用。这个属性的值需要从前处理的MCP工具的返回值 InputParameterFile 字段中获取。",
            "type": "string"
          }
        },
        "required": [
          "imageUrl",
          "InputParameterFile"
        ]
      }
    },
    {
      "name": "GrayToBGRColor",
      "description": "将灰度值转换为 BGR 颜色值\r\n 返回结构是一个序列化的JSON字符串，包含以下字段：\r\nBlue: 蓝色通道值\r\nGreen: 绿色通道值\r\nRed: 红色通道值",
      "inputSchema": {
        "title": "GrayToBGRColor",
        "description": "将灰度值转换为 BGR 颜色值\r\n 返回结构是一个序列化的JSON字符串，包含以下字段：\r\nBlue: 蓝色通道值\r\nGreen: 绿色通道值\r\nRed: 红色通道值",
        "type": "object",
        "properties": {
          "grayValue": {
            "description": "灰度值，范围0-255",
            "type": "integer"
          }
        },
        "required": [
          "grayValue"
        ]
      }
    },
    {
      "name": "ILImageOp_AddScalar",
      "description": "这个是将输入图像和一个标量逐像素相加的工具。输出一个新图像。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
      "inputSchema": {
        "title": "ILImageOp_AddScalar",
        "description": "这个是将输入图像和一个标量逐像素相加的工具。输出一个新图像。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
        "type": "object",
        "properties": {
          "imageUrl": {
            "description": "图片的url地址，通过这个地址获取到图片",
            "type": "string"
          },
          "scalar": {
            "description": "输入的标量，传入类型为double类型。",
            "type": "number"
          },
          "scalar2": {
            "description": "用于为彩色图像指定第二个通道使用的标量值，传入类型为double类型，若 scalar2 和 scalar3 都设置为 0（默认值），则对所有通道均使用 scalar 数值。",
            "type": "number"
          },
          "scalar3": {
            "description": "用于为彩色图像指定第三个通道使用的标量值，传入类型为double类型。",
            "type": "number"
          }
        },
        "required": [
          "imageUrl",
          "scalar",
          "scalar2",
          "scalar3"
        ]
      }
    },
    {
      "name": "ILImageOp_ResizeTo",
      "description": "这个是缩放输入图像到指定的尺寸的工具。若指定的结果图像对象为空图像，则生成和输入图像尺寸相同的图像。否则，将保持结果图像的尺寸，超出图像范围的像素设为背景像素（默认为黑色）。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
      "inputSchema": {
        "title": "ILImageOp_ResizeTo",
        "description": "这个是缩放输入图像到指定的尺寸的工具。若指定的结果图像对象为空图像，则生成和输入图像尺寸相同的图像。否则，将保持结果图像的尺寸，超出图像范围的像素设为背景像素（默认为黑色）。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
        "type": "object",
        "properties": {
          "imageUrl": {
            "description": "图片的url地址，通过这个地址获取到图片",
            "type": "string"
          },
          "w": {
            "description": "输出图像的宽度，传入类型为int类型。",
            "type": "integer"
          },
          "h": {
            "description": "输出图像的高度，传入类型为int类型。",
            "type": "integer"
          },
          "interMethod": {
            "description": "插值方法，传入类型为LPVInterpolationMethod类型。",
            "type": "integer"
          }
        },
        "required": [
          "imageUrl",
          "w",
          "h",
          "interMethod"
        ]
      }
    },
    {
      "name": "ILImageFilter_SetKernelSigma",
      "description": "设置图像滤波工具所使用的滤波核的平滑程度和锐化工具的锐化强度 ,并返回设置完成的图像滤波工具的功能调用的对象。\r\n 返回结构是一个序列化的JSON字符串，属性包括：\r\nLpvClassName(调用工具函数的名称) 和 InputParameterFile(调用工具函数需要传入的参数文件名称)。这两个属性的值可以从前处理的MCP工具的返回值中获取。LpvClassName 表示图像滤波工具的功能调用的对象名称，目前名称应为：ILImageFilter (图像滤波工具的功能相关对象);\r\nInputParameterFile 表示图像滤波工具的功能调用的对象的参数文件名称。\r\n",
      "inputSchema": {
        "title": "ILImageFilter_SetKernelSigma",
        "description": "设置图像滤波工具所使用的滤波核的平滑程度和锐化工具的锐化强度 ,并返回设置完成的图像滤波工具的功能调用的对象。\r\n 返回结构是一个序列化的JSON字符串，属性包括：\r\nLpvClassName(调用工具函数的名称) 和 InputParameterFile(调用工具函数需要传入的参数文件名称)。这两个属性的值可以从前处理的MCP工具的返回值中获取。LpvClassName 表示图像滤波工具的功能调用的对象名称，目前名称应为：ILImageFilter (图像滤波工具的功能相关对象);\r\nInputParameterFile 表示图像滤波工具的功能调用的对象的参数文件名称。\r\n",
        "type": "object",
        "properties": {
          "kSigma": {
            "description": "滤波核的平滑程度，传入类型为double类型，对于 HighPass()，Gaussian() 和 Sharpen() 方法，若设置为 0（默认），则由核尺寸自动计算为：1/6。\r\n若核尺寸设置为 0，则由 Sigma 值自动计算合适的核尺寸，约为 6 × kSigma。\r\n对于 EdgePreserveDenoise()， EdgePreserveTextureEnhance()，若设置为 0，则不做额外的平滑处理 。 \r\n",
            "type": "number"
          },
          "kGain": {
            "description": "锐化强度,传入类型为double类型，默认值为1.0，对于 Sharpen()，kGain 用于控制锐化效果的强度。  \r\n",
            "type": "number"
          },
          "InputParameterFile": {
            "description": "指定的 ILImageFilter 类的文件地址，调用工具函数需要传入的参数文件名称。在调用此工具前要保证前处理中一定要有且仅有一次的 ILImageFilter 初始化工具调用。这个属性的值需要从前处理的MCP工具的返回值 InputParameterFile 字段中获取。",
            "type": "string"
          }
        },
        "required": [
          "kSigma",
          "kGain",
          "InputParameterFile"
        ]
      }
    },
    {
      "name": "GrayToBGR",
      "description": "将灰度图像转换为 BGR 彩色图像\r\n 返回结构是一个序列化的JSON字符串，包含以下字段：\r\nResultImg: 输出结果图像URL地址",
      "inputSchema": {
        "title": "GrayToBGR",
        "description": "将灰度图像转换为 BGR 彩色图像\r\n 返回结构是一个序列化的JSON字符串，包含以下字段：\r\nResultImg: 输出结果图像URL地址",
        "type": "object",
        "properties": {
          "imageUrl": {
            "description": "图片的url地址，通过这个地址获取到输入图像",
            "type": "string"
          }
        },
        "required": [
          "imageUrl"
        ]
      }
    },
    {
      "name": "ILImageThreshold",
      "description": "这个是图片阈值相关的初始化工具。是所有以 \"ILImageThreshold_\" 开头的MCP工具的初始化工具，在这些工具调用之前，都需要保证前处理调用过有且仅有一次此初始化工具。返回结构是一个序列化的json，其中LpvClassName 表示调用工具函数的名称；InputParameterFile 表示 ILImageThreshold 类初始化文件名称;",
      "inputSchema": {
        "title": "ILImageThreshold",
        "description": "这个是图片阈值相关的初始化工具。是所有以 \"ILImageThreshold_\" 开头的MCP工具的初始化工具，在这些工具调用之前，都需要保证前处理调用过有且仅有一次此初始化工具。返回结构是一个序列化的json，其中LpvClassName 表示调用工具函数的名称；InputParameterFile 表示 ILImageThreshold 类初始化文件名称;",
        "type": "object",
        "properties": {}
      }
    },
    {
      "name": "ILImageOp_BitOrScalar",
      "description": "这个是将输入图像和一个标量逐像素进行位操作或的工具。输出一个新图像。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
      "inputSchema": {
        "title": "ILImageOp_BitOrScalar",
        "description": "这个是将输入图像和一个标量逐像素进行位操作或的工具。输出一个新图像。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
        "type": "object",
        "properties": {
          "imageUrl": {
            "description": "图片的url地址，通过这个地址获取到图片",
            "type": "string"
          },
          "scalar": {
            "description": "输入的标量，传入类型为double类型。",
            "type": "number"
          },
          "scalar2": {
            "description": "用于为彩色图像指定第二个通道使用的标量值，传入类型为double类型，若 scalar2 和 scalar3 都设置为 0（默认值），则对所有通道均使用 scalar 数值。",
            "type": "number"
          },
          "scalar3": {
            "description": "用于为彩色图像指定第三个通道使用的标量值，传入类型为double类型。",
            "type": "number"
          }
        },
        "required": [
          "imageUrl",
          "scalar",
          "scalar2",
          "scalar3"
        ]
      }
    },
    {
      "name": "ILImageOp_ProjectX",
      "description": "这个是水平投影图像的工具。聚合每一行上的像素。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
      "inputSchema": {
        "title": "ILImageOp_ProjectX",
        "description": "这个是水平投影图像的工具。聚合每一行上的像素。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
        "type": "object",
        "properties": {
          "imageUrl": {
            "description": "图片的url地址，通过这个地址获取到图片",
            "type": "string"
          },
          "aggType": {
            "description": "投影时所使用的聚合方式，传入类型为LPVAggregation类型。有效的类型为：0：LPVAggAvg（均值：降低图像噪声，在光照条件不佳、亮度不断变化的场景下，获得更稳定的图像质量。）、1：LPVAggDev（标准差：结果图像中的较亮像素表示在多帧图像中该位置的像素值变化较大。）、2：LPVAggVar（方差）、3：LPVAggMin（最小值：减少亮部区域，例如，用于减少过曝区域。）、4：LPVAggMax（最大值：减少暗部区域，减少阴影。）、5：LPVAggMajor（主要成分均值）、6：LPVAggSum（所有值的和）",
            "type": "integer"
          }
        },
        "required": [
          "imageUrl",
          "aggType"
        ]
      }
    },
    {
      "name": "ILImageOp_Min",
      "description": "这个是将两个图像逐像素比较，取其最小值的工具。输出一个新图像，两个输入图像需尺寸相同、类型相同。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
      "inputSchema": {
        "title": "ILImageOp_Min",
        "description": "这个是将两个图像逐像素比较，取其最小值的工具。输出一个新图像，两个输入图像需尺寸相同、类型相同。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
        "type": "object",
        "properties": {
          "imageUrl1": {
            "description": "图片的url地址，通过这个地址获取到图片1",
            "type": "string"
          },
          "imageUrl2": {
            "description": "图片的url地址，通过这个地址获取到图片2",
            "type": "string"
          }
        },
        "required": [
          "imageUrl1",
          "imageUrl2"
        ]
      }
    },
    {
      "name": "ILImageOp_Flip",
      "description": "这个是水平或垂直翻转一个图像的工具。若指定的结果图像对象为空图像，则生成和输入图像尺寸相同的图像。否则，将保持结果图像的尺寸，超出图像范围的像素设为背景像素（默认为黑色）。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
      "inputSchema": {
        "title": "ILImageOp_Flip",
        "description": "这个是水平或垂直翻转一个图像的工具。若指定的结果图像对象为空图像，则生成和输入图像尺寸相同的图像。否则，将保持结果图像的尺寸，超出图像范围的像素设为背景像素（默认为黑色）。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
        "type": "object",
        "properties": {
          "imageUrl": {
            "description": "图片的url地址，通过这个地址获取到图片",
            "type": "string"
          },
          "flipType": {
            "description": "输入的标量，传入类型为LPVFlipType类型。",
            "type": "integer"
          }
        },
        "required": [
          "imageUrl",
          "flipType"
        ]
      }
    },
    {
      "name": "ILImageOp_Split",
      "description": "这个是按网格拆分一个图像的工具。为若干个小图 。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
      "inputSchema": {
        "title": "ILImageOp_Split",
        "description": "这个是按网格拆分一个图像的工具。为若干个小图 。\r\n工具不需要通过其它工具设置参数，不需要传入ILImageOp的对象。 \r\n返回结构是一个序列化的json，其中：\r\nResultImg属性是输出结果图像URL地址。",
        "type": "object",
        "properties": {
          "imageUrl": {
            "description": "图片的url地址，通过这个地址获取到图片",
            "type": "string"
          },
          "xCount": {
            "description": "指定水平方向的拆分数量，传入类型为int类型。",
            "type": "integer"
          },
          "xStep": {
            "description": "单次拆分的水平方向的步长，传入类型为int类型。对于非循环模式，其通常等于结果图像的宽和高。而对于循环模式，这表示每次拆分所收集的行列数，多次拆分组合为最终结果。",
            "type": "integer"
          },
          "xSpace": {
            "description": "拆分的水平方向的间隔，传入类型为int类型。",
            "type": "integer"
          },
          "yCount": {
            "description": "指定垂直方向的拆分数量，传入类型为int类型。",
            "type": "integer"
          },
          "yStep": {
            "description": "单次拆分的垂直方向的步长，传入类型为int类型。",
            "type": "integer"
          },
          "ySpace": {
            "description": "拆分的垂直方向的间隔，传入类型为int类型。",
            "type": "integer"
          },
          "cyclicMode": {
            "description": "是否启用循环拆分，传入类型为bool类型。默认启用。循环模型将循环重复拆分整张图像，再合并单次拆分的若干列为一张图像，作为最终结果。",
            "type": "boolean"
          },
          "sameSize": {
            "description": "输出的结果图像图像队列，传入类型为bool类型。从上到下。",
            "type": "boolean"
          }
        },
        "required": [
          "imageUrl",
          "xCount",
          "xStep",
          "xSpace",
          "yCount",
          "yStep",
          "ySpace",
          "cyclicMode",
          "sameSize"
        ]
      }
    },
    {
      "name": "EdgeFilterSetEdgePolarity",
      "description": "提供了图像边缘增强的功能,设置滤波器的边缘极性，以获得感兴趣极性的边缘 ,并返回设置完成的图像边缘增强的功能调用的对象。\r\n 如果别的图像边缘增强的功能要依赖于当前图像边缘增强的功能调用对象来调用，可以使用当前对象Json。\r\n返回结构是一个序列化的JSON字符串，属性包括：\r\nLpvClassName(调用工具函数的名称) 和 InputParameterFile(调用工具函数需要传入的参数文件名称)。LpvClassName 表示图像边缘增强的功能调用的对象名称，目前名称应为：ILEdgeFilter (图像边缘增强的功能相关对象);\r\nInputParameterFile 表示图像边缘增强的功能调用的对象的参数文件名称。\r\n",
      "inputSchema": {
        "title": "EdgeFilterSetEdgePolarity",
        "description": "提供了图像边缘增强的功能,设置滤波器的边缘极性，以获得感兴趣极性的边缘 ,并返回设置完成的图像边缘增强的功能调用的对象。\r\n 如果别的图像边缘增强的功能要依赖于当前图像边缘增强的功能调用对象来调用，可以使用当前对象Json。\r\n返回结构是一个序列化的JSON字符串，属性包括：\r\nLpvClassName(调用工具函数的名称) 和 InputParameterFile(调用工具函数需要传入的参数文件名称)。LpvClassName 表示图像边缘增强的功能调用的对象名称，目前名称应为：ILEdgeFilter (图像边缘增强的功能相关对象);\r\nInputParameterFile 表示图像边缘增强的功能调用的对象的参数文件名称。\r\n",
        "type": "object",
        "properties": {
          "xPolarityString": {
            "description": "水平方向边缘的极性（以从左到右为方向）。默认设置为任意极性。 \r\n存在 LPVBlack2White , LPVWhite2Black , LPVPolarityEitherEdge , LPVBlackOnWhite , LPVWhiteOnBlack , LPVPolarityEitherObject , LPVPolarityEither 种类型 \r\n类型 LPVBlack2White 表示：沿着区域的扫描方向看，边处于从黑（暗）到白（亮）的边缘 \r\n类型 LPVWhite2Black 表示：沿着区域的扫描方向看，边处于从白（亮）到黑（暗）的边缘  \r\n类型 LPVPolarityEitherEdge 表示：接受任意一种边缘极性，白到黑，或者黑到白 \r\n类型 LPVBlackOnWhite 表示：黑色（暗）目标在白色（亮）背景上 \r\n类型 LPVWhiteOnBlack 表示：白色（亮）目标在黑色（暗）背景上 \r\n类型 LPVPolarityEitherObject 表示：接受任意一种目标极性，白物体黑背景，或者黑物体白背景 \r\n类型 LPVPolarityEither 表示：接受任意一种极性  \r\n传入类型字符串即可，如 \"LPVPolarityEither\" ",
            "type": "string"
          },
          "yPolarityString": {
            "description": "垂直方向边缘的极性（以从上到下为方向）。默认设置为任意极性。 \r\n存在 LPVBlack2White , LPVWhite2Black , LPVPolarityEitherEdge , LPVBlackOnWhite , LPVWhiteOnBlack , LPVPolarityEitherObject , LPVPolarityEither 种类型 \r\n类型 LPVBlack2White 表示：沿着区域的扫描方向看，边处于从黑（暗）到白（亮）的边缘 \r\n类型 LPVWhite2Black 表示：沿着区域的扫描方向看，边处于从白（亮）到黑（暗）的边缘  \r\n类型 LPVPolarityEitherEdge 表示：接受任意一种边缘极性，白到黑，或者黑到白 \r\n类型 LPVBlackOnWhite 表示：黑色（暗）目标在白色（亮）背景上 \r\n类型 LPVWhiteOnBlack 表示：白色（亮）目标在黑色（暗）背景上 \r\n类型 LPVPolarityEitherObject 表示：接受任意一种目标极性，白物体黑背景，或者黑物体白背景 \r\n类型 LPVPolarityEither 表示：接受任意一种极性  \r\n传入类型字符串即可，如 \"LPVPolarityEither\" ",
            "type": "string"
          },
          "edgeFilterClassObjDescriptionJson": {
            "description": "用于图像边缘增强的功能调用的对象。如果用户没有指定图像边缘增强的功能相关对象，请创建一个图像边缘增强的功能调用的对象后传入。\r\n如果用户指定图像边缘增强的功能相关对象，传入一个序列化的JSON字符串，属性包括：LpvClassName(调用工具函数的名称) 和 InputParameterFile(调用工具函数需要传入的参数文件名称)。这两个属性的值可以从前处理的MCP工具的返回值中获取。LpvClassName 表示图像边缘增强的功能调用的对象名称，目前名称应为：ILEdgeFilter (图像边缘增强的功能相关对象);\r\nInputParameterFile 表示调用工具函数需要传入的参数文件名称。\r\n",
            "type": "string"
          }
        },
        "required": [
          "xPolarityString",
          "yPolarityString",
          "edgeFilterClassObjDescriptionJson"
        ]
      }
    },
    {
      "name": "Depth16To8",
      "description": "转换 16 位图像到 8 位图像\r\n 返回结构是一个序列化的JSON字符串，包含以下字段：\r\nResultImg: 输出结果图像URL地址",
      "inputSchema": {
        "title": "Depth16To8",
        "description": "转换 16 位图像到 8 位图像\r\n 返回结构是一个序列化的JSON字符串，包含以下字段：\r\nResultImg: 输出结果图像URL地址",
        "type": "object",
        "properties": {
          "imageUrl": {
            "description": "图片的url地址，通过这个地址获取到输入图像",
            "type": "string"
          },
          "fromNthBit": {
            "description": "指定提取的开始索引，取值范围为 -7 ~ 15",
            "type": "integer",
            "default": 0
          }
        },
        "required": [
          "imageUrl"
        ]
      }
    },
    {
      "name": "EdgeFilterSetEdgeKernel",
      "description": "提供了图像边缘增强的功能,设置图像边缘滤波器所使用的滤波核类型核尺寸 ,并返回设置完成的图像边缘增强的功能调用的对象。\r\n 如果别的图像边缘增强的功能要依赖于当前图像边缘增强的功能调用对象来调用，可以使用当前对象Json。\r\n返回结构是一个序列化的JSON字符串，属性包括：\r\nLpvClassName(调用工具函数的名称) 和 InputParameterFile(调用工具函数需要传入的参数文件名称)。LpvClassName 表示图像边缘增强的功能调用的对象名称，目前名称应为：ILEdgeFilter (图像边缘增强的功能相关对象);\r\nInputParameterFile 表示图像边缘增强的功能调用的对象的参数文件名称。\r\n",
      "inputSchema": {
        "title": "EdgeFilterSetEdgeKernel",
        "description": "提供了图像边缘增强的功能,设置图像边缘滤波器所使用的滤波核类型核尺寸 ,并返回设置完成的图像边缘增强的功能调用的对象。\r\n 如果别的图像边缘增强的功能要依赖于当前图像边缘增强的功能调用对象来调用，可以使用当前对象Json。\r\n返回结构是一个序列化的JSON字符串，属性包括：\r\nLpvClassName(调用工具函数的名称) 和 InputParameterFile(调用工具函数需要传入的参数文件名称)。LpvClassName 表示图像边缘增强的功能调用的对象名称，目前名称应为：ILEdgeFilter (图像边缘增强的功能相关对象);\r\nInputParameterFile 表示图像边缘增强的功能调用的对象的参数文件名称。\r\n",
        "type": "object",
        "properties": {
          "kTypeString": {
            "description": "核类型，目前有三种核类型，LPVSobel , LPVPrewitt , LPVScharr 。传入类型为字符串类型\r\n其中LPVSobel表示：Sobel 核，该核结合了高斯模糊和差分的效果，因此对噪声的抗干扰性较强。\r\n其中LPVPrewitt表示：Prewitt 核，相较于Sobel算子的加权差分机制，Prewitt算子未引入中心像素权重，适用于边缘灰度对比明显且噪声较多的场景。\r\n其中LPVScharr表示：Scharr 核，其精度略差于 Sobel 核但更平滑。\r\n",
            "type": "string"
          },
          "kWidth": {
            "description": "滤波核的宽度,传入类型为int类型,需要是一个 3 ~ 31 之间的奇数，如 3, 5, 7 等。 若核尺寸设置为 1，将退化为 (-1, 1)，指定的核类型不起作用。 \r\n",
            "type": "integer"
          },
          "kHeight": {
            "description": "滤波核的高度,传入类型为int类型，需要是一个 3 ~ 31 之间的奇数，如 3, 5, 7 等。若设置为 0，则使用与宽度相同。  \r\n",
            "type": "integer"
          },
          "edgeFilterClassObjDescriptionJson": {
            "description": "用于图像边缘增强的功能调用的对象。如果用户没有指定图像边缘增强的功能相关对象，请创建一个图像边缘增强的功能调用的对象后传入。\r\n如果用户指定图像边缘增强的功能相关对象，传入一个序列化的JSON字符串，属性包括：LpvClassName(调用工具函数的名称) 和 InputParameterFile(调用工具函数需要传入的参数文件名称)。这两个属性的值可以从前处理的MCP工具的返回值中获取。LpvClassName 表示图像边缘增强的功能调用的对象名称，目前名称应为：ILEdgeFilter (图像边缘增强的功能相关对象);\r\nInputParameterFile 表示调用工具函数需要传入的参数文件名称。\r\n",
            "type": "string"
          }
        },
        "required": [
          "kTypeString",
          "kWidth",
          "kHeight",
          "edgeFilterClassObjDescriptionJson"
        ]
      }
    }
  ]
}